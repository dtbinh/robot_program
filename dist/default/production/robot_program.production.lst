

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sat May 23 23:59:32 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F687
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  000A                     	;# 
    28  000B                     	;# 
    29  000C                     	;# 
    30  000D                     	;# 
    31  000E                     	;# 
    32  000E                     	;# 
    33  000F                     	;# 
    34  0010                     	;# 
    35  0013                     	;# 
    36  0014                     	;# 
    37  0018                     	;# 
    38  0019                     	;# 
    39  001A                     	;# 
    40  001E                     	;# 
    41  001F                     	;# 
    42  0081                     	;# 
    43  0085                     	;# 
    44  0086                     	;# 
    45  0087                     	;# 
    46  008C                     	;# 
    47  008D                     	;# 
    48  008E                     	;# 
    49  008F                     	;# 
    50  0090                     	;# 
    51  0093                     	;# 
    52  0093                     	;# 
    53  0093                     	;# 
    54  0094                     	;# 
    55  0095                     	;# 
    56  0095                     	;# 
    57  0096                     	;# 
    58  0096                     	;# 
    59  0097                     	;# 
    60  0098                     	;# 
    61  0099                     	;# 
    62  009A                     	;# 
    63  009B                     	;# 
    64  009E                     	;# 
    65  009F                     	;# 
    66  010C                     	;# 
    67  010C                     	;# 
    68  010D                     	;# 
    69  0115                     	;# 
    70  0116                     	;# 
    71  0118                     	;# 
    72  0119                     	;# 
    73  011A                     	;# 
    74  011B                     	;# 
    75  011E                     	;# 
    76  011F                     	;# 
    77  018C                     	;# 
    78  018D                     	;# 
    79  019E                     	;# 
    80                           
    81                           	psect	idataBANK0
    82  019A                     __pidataBANK0:	
    83                           
    84                           ;initializer for _uart_data
    85  019A  342D               	retlw	45
    86  019B  342D               	retlw	45
    87  019C  342D               	retlw	45
    88  019D  342D               	retlw	45
    89  019E  342D               	retlw	45
    90  019F  342D               	retlw	45
    91  01A0  342D               	retlw	45
    92  01A1  342D               	retlw	45
    93  01A2  342D               	retlw	45
    94  01A3  342D               	retlw	45
    95  01A4  342D               	retlw	45
    96  01A5  342D               	retlw	45
    97  01A6  342D               	retlw	45
    98  01A7  342D               	retlw	45
    99  01A8  342D               	retlw	45
   100                           
   101                           ;initializer for _motor_data
   102  01A9  342D               	retlw	45
   103  01AA  342D               	retlw	45
   104  01AB  342D               	retlw	45
   105                           
   106                           ;initializer for _motor1_data
   107  01AC  342D               	retlw	45
   108                           
   109                           ;initializer for _motor1stop
   110  01AD  3401               	retlw	1
   111                           
   112                           ;initializer for _motor2_data
   113  01AE  342D               	retlw	45
   114                           
   115                           ;initializer for _motor2stop
   116  01AF  3401               	retlw	1
   117                           
   118                           ;initializer for _motor3_data
   119  01B0  342D               	retlw	45
   120                           
   121                           ;initializer for _motor3stop
   122  01B1  3401               	retlw	1
   123                           
   124                           	psect	strings
   125  014F                     __pstrings:	
   126  014F                     stringtab:	
   127  014F                     __stringtab:	
   128  014F                     stringcode:	
   129                           ;	String table - string pointers are 1 byte each
   130                           
   131  014F                     stringdir:	
   132  014F  3001               	movlw	high stringdir
   133  0150  008A               	movwf	10
   134  0151  0804               	movf	4,w
   135  0152  0A84               	incf	4,f
   136  0153  0782               	addwf	2,f
   137  0154                     __stringbase:	
   138  0154  3400               	retlw	0
   139  0155                     __end_of__stringtab:	
   140  0155                     _motor1Array:	
   141  0155  340F               	retlw	15
   142  0156  3487               	retlw	135
   143  0157  3405               	retlw	5
   144  0158  3443               	retlw	67
   145  0159  3469               	retlw	105
   146  015A  3482               	retlw	130
   147  015B  3494               	retlw	148
   148  015C  34A1               	retlw	161
   149  015D  34AC               	retlw	172
   150  015E  34B4               	retlw	180
   151  015F  34BB               	retlw	187
   152  0160  34C0               	retlw	192
   153  0161  34C5               	retlw	197
   154  0162  34C9               	retlw	201
   155  0163  34CD               	retlw	205
   156  0164                     __end_of_motor1Array:	
   157  0164                     _motor2_1Array:	
   158  0164  34A2               	retlw	162
   159  0165  34D1               	retlw	209
   160  0166  34E0               	retlw	224
   161  0167  34E8               	retlw	232
   162  0168  34ED               	retlw	237
   163  0169  34F0               	retlw	240
   164  016A  34F2               	retlw	242
   165  016B  34F4               	retlw	244
   166  016C  34F5               	retlw	245
   167  016D  34F6               	retlw	246
   168  016E  34F7               	retlw	247
   169  016F  34F8               	retlw	248
   170  0170  34F8               	retlw	248
   171  0171  34F9               	retlw	249
   172  0172  34F9               	retlw	249
   173  0173                     __end_of_motor2_1Array:	
   174  0173                     _motor2_2Array:	
   175  0173  343F               	retlw	63
   176  0174  341F               	retlw	31
   177  0175  34BF               	retlw	191
   178  0176  348F               	retlw	143
   179  0177  343F               	retlw	63
   180  0178  345F               	retlw	95
   181  0179  349A               	retlw	154
   182  017A  3447               	retlw	71
   183  017B  3494               	retlw	148
   184  017C  349F               	retlw	159
   185  017D  3479               	retlw	121
   186  017E  342F               	retlw	47
   187  017F  34C9               	retlw	201
   188  0180  344D               	retlw	77
   189  0181  34BF               	retlw	191
   190  0182                     __end_of_motor2_2Array:	
   191  0182                     _posArray1:	
   192  0182  3411               	retlw	17
   193  0183  3401               	retlw	1
   194  0184  3403               	retlw	3
   195  0185  3402               	retlw	2
   196  0186  3406               	retlw	6
   197  0187  3404               	retlw	4
   198  0188  3414               	retlw	20
   199  0189  3410               	retlw	16
   200  018A                     __end_of_posArray1:	
   201  018A                     _posArray2:	
   202  018A  3409               	retlw	9
   203  018B  3401               	retlw	1
   204  018C  3403               	retlw	3
   205  018D  3402               	retlw	2
   206  018E  3406               	retlw	6
   207  018F  3404               	retlw	4
   208  0190  340C               	retlw	12
   209  0191  3408               	retlw	8
   210  0192                     __end_of_posArray2:	
   211  0192                     _posArray3:	
   212  0192  3490               	retlw	144
   213  0193  3410               	retlw	16
   214  0194  3430               	retlw	48
   215  0195  3420               	retlw	32
   216  0196  3460               	retlw	96
   217  0197  3440               	retlw	64
   218  0198  34C0               	retlw	192
   219  0199  3480               	retlw	128
   220  019A                     __end_of_posArray3:	
   221                           
   222                           	psect	nvCOMMON
   223  007C                     __pnvCOMMON:	
   224  007C                     _tmp1:	
   225  007C                     	ds	1
   226  0005                     _PORTA	set	5
   227  0007                     _PORTC	set	7
   228  001A                     _RCREG	set	26
   229  0010                     _T1CONbits	set	16
   230  0001                     _TMR0	set	1
   231  000F                     _TMR1H	set	15
   232  000E                     _TMR1L	set	14
   233  00C4                     _CREN	set	196
   234  00C2                     _FERR	set	194
   235  005F                     _GIE	set	95
   236  00C1                     _OERR	set	193
   237  005E                     _PEIE	set	94
   238  0065                     _RCIF	set	101
   239  00C7                     _SPEN	set	199
   240  005D                     _T0IE	set	93
   241  005A                     _T0IF	set	90
   242  0060                     _T1IF	set	96
   243  0083                     _T1OSCEN	set	131
   244  0081                     _TMR1CS	set	129
   245  0086                     _TMR1GE	set	134
   246  0080                     _TMR1ON	set	128
   247  0081                     _OPTION_REG	set	129
   248  008F                     _OSCCON	set	143
   249  0090                     _OSCTUNE	set	144
   250  0099                     _SPBRG	set	153
   251  009A                     _SPBRGH	set	154
   252  0085                     _TRISA	set	133
   253  0086                     _TRISB	set	134
   254  0087                     _TRISC	set	135
   255  04DB                     _BRG16	set	1243
   256  04C2                     _BRGH	set	1218
   257  0465                     _RCIE	set	1125
   258  04C4                     _SYNC	set	1220
   259  0460                     _TMR1IE	set	1120
   260  011E                     _ANSEL	set	286
   261  011F                     _ANSELH	set	287
   262                           
   263                           ; #config settings
   264  0000                     
   265                           	psect	cinit
   266  0011                     start_initialization:	
   267  0011                     __initialization:	
   268                           
   269                           ; Clear objects allocated to COMMON
   270  0011  3070               	movlw	low __pbssCOMMON
   271  0012  0084               	movwf	4
   272  0013  3076               	movlw	low (__pbssCOMMON+6)
   273  0014  21C1               	fcall	clear_ram0
   274                           
   275                           ; Clear objects allocated to BANK0
   276  0015  1383               	bcf	3,7	;select IRP bank0
   277  0016  3038               	movlw	low __pbssBANK0
   278  0017  0084               	movwf	4
   279  0018  304D               	movlw	low (__pbssBANK0+21)
   280  0019  21C1               	fcall	clear_ram0
   281                           
   282                           ; Initialize objects allocated to BANK0
   283  001A  3038               	movlw	low (__pdataBANK0+24)
   284  001B  00FD               	movwf	btemp+-1
   285  001C  3001               	movlw	high __pidataBANK0
   286  001D  00FE               	movwf	btemp
   287  001E  309A               	movlw	low __pidataBANK0
   288  001F  00FF               	movwf	btemp+1
   289  0020  3020               	movlw	low __pdataBANK0
   290  0021  0084               	movwf	4
   291  0022  21B6               	fcall	init_ram0
   292  0023                     end_of_initialization:	
   293                           ;End of C runtime variable initialization code
   294                           
   295  0023                     __end_of__initialization:	
   296  0023  0183               	clrf	3
   297  0024  28C0               	ljmp	_main	;jump to C main() function
   298                           
   299                           	psect	bssCOMMON
   300  0070                     __pbssCOMMON:	
   301  0070                     _counter_uart:	
   302  0070                     	ds	1
   303  0071                     _incremental1:	
   304  0071                     	ds	1
   305  0072                     _motor1:	
   306  0072                     	ds	1
   307  0073                     _motor2:	
   308  0073                     	ds	1
   309  0074                     _tmp2:	
   310  0074                     	ds	1
   311  0075                     _tmp_data:	
   312  0075                     	ds	1
   313                           
   314                           	psect	bssBANK0
   315  0038                     __pbssBANK0:	
   316  0038                     _counter1:	
   317  0038                     	ds	2
   318  003A                     _counter2:	
   319  003A                     	ds	2
   320  003C                     _counter3:	
   321  003C                     	ds	2
   322  003E                     _direction1:	
   323  003E                     	ds	2
   324  0040                     _direction2:	
   325  0040                     	ds	2
   326  0042                     _direction3:	
   327  0042                     	ds	2
   328  0044                     _loop1:	
   329  0044                     	ds	2
   330  0046                     _loop3:	
   331  0046                     	ds	2
   332  0048                     _incremental3:	
   333  0048                     	ds	1
   334  0049                     _init_received:	
   335  0049                     	ds	1
   336  004A                     _motor3:	
   337  004A                     	ds	1
   338  004B                     _tmp3:	
   339  004B                     	ds	1
   340  004C                     _tmp_data2:	
   341  004C                     	ds	1
   342                           
   343                           	psect	dataBANK0
   344  0020                     __pdataBANK0:	
   345  0020                     _uart_data:	
   346  0020                     	ds	15
   347  002F                     _motor_data:	
   348  002F                     	ds	3
   349  0032                     _motor1_data:	
   350  0032                     	ds	1
   351  0033                     _motor1stop:	
   352  0033                     	ds	1
   353  0034                     _motor2_data:	
   354  0034                     	ds	1
   355  0035                     _motor2stop:	
   356  0035                     	ds	1
   357  0036                     _motor3_data:	
   358  0036                     	ds	1
   359  0037                     _motor3stop:	
   360  0037                     	ds	1
   361                           
   362                           	psect	clrtext
   363  01C1                     clear_ram0:	
   364                           ;	Called with FSR containing the base address, and
   365                           ;	W with the last address+1
   366                           
   367  01C1  0064               	clrwdt	;clear the watchdog before getting into this loop
   368  01C2                     clrloop0:	
   369  01C2  0180               	clrf	0	;clear RAM location pointed to by FSR
   370  01C3  0A84               	incf	4,f	;increment pointer
   371  01C4  0604               	xorwf	4,w	;XOR with final address
   372  01C5  1903               	btfsc	3,2	;have we reached the end yet?
   373  01C6  3400               	retlw	0	;all done for this memory range, return
   374  01C7  0604               	xorwf	4,w	;XOR again to restore value
   375  01C8  29C2               	goto	clrloop0	;do the next byte
   376                           
   377                           	psect	inittext
   378  01B2                     init_fetch0:	
   379                           ;	Called with low address in FSR and high address in W
   380                           
   381  01B2  087E               	movf	126,w
   382  01B3  008A               	movwf	10
   383  01B4  087F               	movf	127,w
   384  01B5  0082               	movwf	2
   385  01B6                     init_ram0:	
   386                           ;Called with:
   387                           ;	high address of idata address in btemp 
   388                           ;	low address of idata address in btemp+1 
   389                           ;	low address of data in FSR
   390                           ;	high address + 1 of data in btemp-1
   391                           
   392  01B6  21B2               	fcall	init_fetch0
   393  01B7  0080               	movwf	0
   394  01B8  0A84               	incf	4,f
   395  01B9  0804               	movf	4,w
   396  01BA  067D               	xorwf	125,w
   397  01BB  1903               	btfsc	3,2
   398  01BC  3400               	retlw	0
   399  01BD  0AFF               	incf	127,f
   400  01BE  1903               	btfsc	3,2
   401  01BF  0AFE               	incf	126,f
   402  01C0  29B6               	goto	init_ram0
   403                           
   404                           	psect	cstackCOMMON
   405  0076                     __pcstackCOMMON:	
   406  0076                     ?_global_interrupt:	
   407  0076                     ??_global_interrupt:	
   408                           ; 0 bytes @ 0x0
   409                           
   410  0076                     ?_main:	
   411                           ; 0 bytes @ 0x0
   412                           
   413                           
   414                           ; 2 bytes @ 0x0
   415  0076                     	ds	6
   416                           
   417                           	psect	cstackBANK0
   418  004D                     __pcstackBANK0:	
   419  004D                     ??_main:	
   420                           
   421                           ; 0 bytes @ 0x0
   422  004D                     	ds	1
   423                           
   424                           	psect	maintext
   425  00C0                     __pmaintext:	
   426 ;;
   427 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   428 ;;
   429 ;; *************** function _main *****************
   430 ;; Defined at:
   431 ;;		line 151 in file "main.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;		None
   434 ;; Auto vars:     Size  Location     Type
   435 ;;		None
   436 ;; Return value:  Size  Location     Type
   437 ;;                  2  162[COMMON] int 
   438 ;; Registers used:
   439 ;;		wreg, status,2, status,0
   440 ;; Tracked objects:
   441 ;;		On entry : 17F/0
   442 ;;		On exit  : 0/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMMON   BANK0   BANK1
   445 ;;      Params:         0       0       0
   446 ;;      Locals:         0       0       0
   447 ;;      Temps:          0       1       0
   448 ;;      Totals:         0       1       0
   449 ;;Total ram usage:        1 bytes
   450 ;; Hardware stack levels required when called:    2
   451 ;; This function calls:
   452 ;;		Nothing
   453 ;; This function is called by:
   454 ;;		Startup code after reset
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458                           
   459                           ;psect for function _main
   460  00C0                     _main:	
   461                           
   462                           ;main.c: 153: OSCCON = 0x00;
   463                           
   464                           ;incstack = 0
   465                           ; Regs used in _main: [wreg+status,2+status,0]
   466  00C0  1683               	bsf	3,5	;RP0=1, select bank1
   467  00C1  1303               	bcf	3,6	;RP1=0, select bank1
   468  00C2  018F               	clrf	15	;volatile
   469                           
   470                           ;main.c: 154: OSCCON |= 0b01110001;
   471  00C3  3071               	movlw	113
   472  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   473  00C5  1303               	bcf	3,6	;RP1=0, select bank0
   474  00C6  00CD               	movwf	??_main
   475  00C7  084D               	movf	??_main,w
   476  00C8  1683               	bsf	3,5	;RP0=1, select bank1
   477  00C9  1303               	bcf	3,6	;RP1=0, select bank1
   478  00CA  048F               	iorwf	15,f	;volatile
   479                           
   480                           ;main.c: 155: OSCTUNE = 0x00;
   481  00CB  0190               	clrf	16	;volatile
   482                           
   483                           ;main.c: 159: OPTION_REG &= 0b11010000;
   484  00CC  30D0               	movlw	208
   485  00CD  1283               	bcf	3,5	;RP0=0, select bank0
   486  00CE  1303               	bcf	3,6	;RP1=0, select bank0
   487  00CF  00CD               	movwf	??_main
   488  00D0  084D               	movf	??_main,w
   489  00D1  1683               	bsf	3,5	;RP0=1, select bank1
   490  00D2  1303               	bcf	3,6	;RP1=0, select bank1
   491  00D3  0581               	andwf	1,f	;volatile
   492                           
   493                           ;main.c: 160: OPTION_REG |= 0b00000100;
   494  00D4  1501               	bsf	1,2	;volatile
   495                           
   496                           ;main.c: 161: TMR0 = 0x00;
   497  00D5  1283               	bcf	3,5	;RP0=0, select bank0
   498  00D6  1303               	bcf	3,6	;RP1=0, select bank0
   499  00D7  0181               	clrf	1	;volatile
   500                           
   501                           ;main.c: 162: T0IE = 1;
   502  00D8  168B               	bsf	11,5	;volatile
   503                           
   504                           ;main.c: 167: TMR1GE = 0;
   505  00D9  1310               	bcf	16,6	;volatile
   506                           
   507                           ;main.c: 168: T1CONbits.T1CKPS0 = 0;
   508  00DA  1210               	bcf	16,4	;volatile
   509                           
   510                           ;main.c: 169: T1CONbits.T1CKPS1 = 0;
   511  00DB  1290               	bcf	16,5	;volatile
   512                           
   513                           ;main.c: 170: T1OSCEN = 0;
   514  00DC  1190               	bcf	16,3	;volatile
   515                           
   516                           ;main.c: 171: TMR1CS = 0;
   517  00DD  1090               	bcf	16,1	;volatile
   518                           
   519                           ;main.c: 172: TMR1ON = 1;
   520  00DE  1410               	bsf	16,0	;volatile
   521                           
   522                           ;main.c: 173: TMR1H = 0x00;
   523  00DF  018F               	clrf	15	;volatile
   524                           
   525                           ;main.c: 174: TMR1H = 0x00;
   526  00E0  018F               	clrf	15	;volatile
   527                           
   528                           ;main.c: 175: TMR1IE = 1;
   529  00E1  1683               	bsf	3,5	;RP0=1, select bank1
   530  00E2  1303               	bcf	3,6	;RP1=0, select bank1
   531  00E3  140C               	bsf	12,0	;volatile
   532                           
   533                           ;main.c: 181: BRG16 = 0;
   534  00E4  119B               	bcf	27,3	;volatile
   535                           
   536                           ;main.c: 182: BRGH = 0;
   537  00E5  1118               	bcf	24,2	;volatile
   538                           
   539                           ;main.c: 183: SPBRGH = 0;
   540  00E6  019A               	clrf	26	;volatile
   541                           
   542                           ;main.c: 184: SPBRG = 0x0C;
   543  00E7  300C               	movlw	12
   544  00E8  0099               	movwf	25	;volatile
   545                           
   546                           ;main.c: 186: SYNC = 0;
   547  00E9  1218               	bcf	24,4	;volatile
   548                           
   549                           ;main.c: 187: SPEN = 1;
   550  00EA  1283               	bcf	3,5	;RP0=0, select bank0
   551  00EB  1303               	bcf	3,6	;RP1=0, select bank0
   552  00EC  1798               	bsf	24,7	;volatile
   553                           
   554                           ;main.c: 188: RCIE = 1;
   555  00ED  1683               	bsf	3,5	;RP0=1, select bank1
   556  00EE  1303               	bcf	3,6	;RP1=0, select bank1
   557  00EF  168C               	bsf	12,5	;volatile
   558                           
   559                           ;main.c: 189: CREN = 1;
   560  00F0  1283               	bcf	3,5	;RP0=0, select bank0
   561  00F1  1303               	bcf	3,6	;RP1=0, select bank0
   562  00F2  1618               	bsf	24,4	;volatile
   563                           
   564                           ;main.c: 209: TRISA = 0x00;
   565  00F3  1683               	bsf	3,5	;RP0=1, select bank1
   566  00F4  1303               	bcf	3,6	;RP1=0, select bank1
   567  00F5  0185               	clrf	5	;volatile
   568                           
   569                           ;main.c: 210: TRISB = 0b00100000;
   570  00F6  3020               	movlw	32
   571  00F7  0086               	movwf	6	;volatile
   572                           
   573                           ;main.c: 211: TRISC = 0x00;
   574  00F8  0187               	clrf	7	;volatile
   575                           
   576                           ;main.c: 212: ANSEL = 0x00;
   577  00F9  1283               	bcf	3,5	;RP0=0, select bank2
   578  00FA  1703               	bsf	3,6	;RP1=1, select bank2
   579  00FB  019E               	clrf	30	;volatile
   580                           
   581                           ;main.c: 213: ANSELH = 0x00;
   582  00FC  019F               	clrf	31	;volatile
   583                           
   584                           ;main.c: 216: PORTA = 0x00;
   585  00FD  1283               	bcf	3,5	;RP0=0, select bank0
   586  00FE  1303               	bcf	3,6	;RP1=0, select bank0
   587  00FF  0185               	clrf	5	;volatile
   588                           
   589                           ;main.c: 217: PEIE = 1;
   590  0100  170B               	bsf	11,6	;volatile
   591                           
   592                           ;main.c: 218: GIE = 1;
   593  0101  178B               	bsf	11,7	;volatile
   594  0102                     l1045:	
   595                           ;main.c: 220: while(1){
   596                           
   597                           
   598                           ;main.c: 223: tmp1 = uart_data[14];
   599  0102  082E               	movf	_uart_data+14,w
   600  0103  00CD               	movwf	??_main
   601  0104  084D               	movf	??_main,w
   602  0105  00FC               	movwf	_tmp1
   603                           
   604                           ;main.c: 226: if(tmp1 >=60){
   605  0106  303C               	movlw	60
   606  0107  027C               	subwf	_tmp1,w
   607  0108  1C03               	skipc
   608  0109  2913               	goto	l1053
   609                           
   610                           ;main.c: 227: tmp1 = tmp1 - 15;
   611  010A  087C               	movf	_tmp1,w
   612  010B  3EF1               	addlw	241
   613  010C  00CD               	movwf	??_main
   614  010D  084D               	movf	??_main,w
   615  010E  00FC               	movwf	_tmp1
   616                           
   617                           ;main.c: 228: direction1 = -1;
   618  010F  30FF               	movlw	255
   619  0110  00BE               	movwf	_direction1
   620  0111  30FF               	movlw	255
   621  0112  2916               	goto	L1
   622  0113                     l1053:	
   623                           ;main.c: 229: }
   624                           
   625                           
   626                           ;main.c: 230: else
   627                           ;main.c: 231: direction1 = 1;
   628  0113  3001               	movlw	1
   629  0114  00BE               	movwf	_direction1
   630  0115  3000               	movlw	0
   631  0116                     L1:	
   632  0116  00BF               	movwf	_direction1+1
   633                           
   634                           ;main.c: 233: tmp1 = tmp1 - 45;
   635  0117  087C               	movf	_tmp1,w
   636  0118  3ED3               	addlw	211
   637  0119  00CD               	movwf	??_main
   638  011A  084D               	movf	??_main,w
   639  011B  00FC               	movwf	_tmp1
   640                           
   641                           ;main.c: 234: if(tmp1 == 0)
   642  011C  08FC               	movf	_tmp1,f
   643  011D  1D03               	skipz
   644  011E  2924               	goto	l1059
   645                           
   646                           ;main.c: 235: incremental1 = 2;
   647  011F  3002               	movlw	2
   648  0120  00CD               	movwf	??_main
   649  0121  084D               	movf	??_main,w
   650  0122  00F1               	movwf	_incremental1
   651  0123  292C               	goto	l1065
   652  0124                     l1059:	
   653                           
   654                           ;main.c: 236: else if(tmp1 == 1)
   655  0124  087C               	movf	_tmp1,w
   656  0125  3A01               	xorlw	1
   657  0126  1D03               	skipz
   658  0127  292B               	goto	l1063
   659                           
   660                           ;main.c: 237: incremental1 = 1;
   661  0128  01F1               	clrf	_incremental1
   662  0129  0AF1               	incf	_incremental1,f
   663  012A  292C               	goto	l1065
   664  012B                     l1063:	
   665                           
   666                           ;main.c: 238: else
   667                           ;main.c: 239: incremental1 = 0;
   668  012B  01F1               	clrf	_incremental1
   669  012C                     l1065:	
   670                           
   671                           ;main.c: 241: motor1 = tmp1;
   672  012C  087C               	movf	_tmp1,w
   673  012D  00CD               	movwf	??_main
   674  012E  084D               	movf	??_main,w
   675  012F  00F2               	movwf	_motor1
   676                           
   677                           ;main.c: 245: tmp2 = uart_data[13];
   678  0130  082D               	movf	_uart_data+13,w
   679  0131  00CD               	movwf	??_main
   680  0132  084D               	movf	??_main,w
   681  0133  00F4               	movwf	_tmp2
   682                           
   683                           ;main.c: 247: if(tmp2 >=60){
   684  0134  303C               	movlw	60
   685  0135  0274               	subwf	_tmp2,w
   686  0136  1C03               	skipc
   687  0137  2941               	goto	l1075
   688                           
   689                           ;main.c: 248: tmp2 = tmp2 - 15;
   690  0138  0874               	movf	_tmp2,w
   691  0139  3EF1               	addlw	241
   692  013A  00CD               	movwf	??_main
   693  013B  084D               	movf	??_main,w
   694  013C  00F4               	movwf	_tmp2
   695                           
   696                           ;main.c: 249: direction2 = -1;
   697  013D  30FF               	movlw	255
   698  013E  00C0               	movwf	_direction2
   699  013F  30FF               	movlw	255
   700  0140  2944               	goto	L2
   701  0141                     l1075:	
   702                           ;main.c: 250: }
   703                           
   704                           
   705                           ;main.c: 251: else
   706                           ;main.c: 252: direction2 = 1;
   707  0141  3001               	movlw	1
   708  0142  00C0               	movwf	_direction2
   709  0143  3000               	movlw	0
   710  0144                     L2:	
   711  0144  00C1               	movwf	_direction2+1
   712                           
   713                           ;main.c: 254: tmp2 = tmp2 - 45;
   714  0145  0874               	movf	_tmp2,w
   715  0146  3ED3               	addlw	211
   716  0147  00CD               	movwf	??_main
   717  0148  084D               	movf	??_main,w
   718  0149  00F4               	movwf	_tmp2
   719                           
   720                           ;main.c: 255: motor2 = tmp2;
   721  014A  0874               	movf	_tmp2,w
   722  014B  00CD               	movwf	??_main
   723  014C  084D               	movf	??_main,w
   724  014D  00F3               	movwf	_motor2
   725  014E  2902               	goto	l1045
   726  014F                     __end_of_main:	
   727                           
   728                           	psect	text1
   729  0025                     __ptext1:	
   730 ;; *************** function _global_interrupt *****************
   731 ;; Defined at:
   732 ;;		line 56 in file "main.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;		None
   735 ;; Auto vars:     Size  Location     Type
   736 ;;		None
   737 ;; Return value:  Size  Location     Type
   738 ;;		None               void
   739 ;; Registers used:
   740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMMON   BANK0   BANK1
   746 ;;      Params:         0       0       0
   747 ;;      Locals:         0       0       0
   748 ;;      Temps:          6       0       0
   749 ;;      Totals:         6       0       0
   750 ;;Total ram usage:        6 bytes
   751 ;; Hardware stack levels used:    2
   752 ;; This function calls:
   753 ;;		Nothing
   754 ;; This function is called by:
   755 ;;		Interrupt level 1
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           
   760                           ;psect for function _global_interrupt
   761  0025                     _global_interrupt:	
   762                           
   763                           ;main.c: 58: GIE = 0 ;
   764  0025  138B               	bcf	11,7	;volatile
   765                           
   766                           ;main.c: 59: CREN = 1;
   767  0026  1618               	bsf	24,4	;volatile
   768                           
   769                           ;main.c: 61: if(RCIF){
   770  0027  1E8C               	btfss	12,5	;volatile
   771  0028  284C               	goto	i1l143
   772                           
   773                           ;main.c: 64: if(FERR == 0 && OERR == 0){
   774  0029  1D18               	btfss	24,2	;volatile
   775  002A  1898               	btfsc	24,1	;volatile
   776  002B  2845               	goto	i1l144
   777                           
   778                           ;main.c: 65: tmp_data = RCREG;
   779  002C  081A               	movf	26,w	;volatile
   780  002D  00F6               	movwf	??_global_interrupt
   781  002E  0876               	movf	??_global_interrupt,w
   782  002F  00F5               	movwf	_tmp_data
   783                           
   784                           ;main.c: 67: if(tmp_data == 0x55){
   785  0030  0875               	movf	_tmp_data,w
   786  0031  3A55               	xorlw	85
   787  0032  1903               	btfsc	3,2
   788  0033  284A               	goto	i1l831
   789                           
   790                           ;main.c: 71: }
   791                           ;main.c: 73: uart_data[counter_uart] = tmp_data;
   792                           
   793                           ;main.c: 70: return;
   794                           
   795                           ;main.c: 69: GIE = 1;
   796                           
   797                           ;main.c: 68: counter_uart = 0;
   798  0034  0875               	movf	_tmp_data,w
   799  0035  00F6               	movwf	??_global_interrupt
   800  0036  0870               	movf	_counter_uart,w
   801  0037  3E20               	addlw	_uart_data& (0+255)
   802  0038  0084               	movwf	4
   803  0039  0876               	movf	??_global_interrupt,w
   804  003A  1383               	bcf	3,7	;select IRP bank0
   805  003B  0080               	movwf	0
   806                           
   807                           ;main.c: 74: counter_uart += 1;
   808  003C  3001               	movlw	1
   809  003D  00F6               	movwf	??_global_interrupt
   810  003E  0876               	movf	??_global_interrupt,w
   811  003F  07F0               	addwf	_counter_uart,f
   812                           
   813                           ;main.c: 75: if(counter_uart == 15){
   814  0040  0870               	movf	_counter_uart,w
   815  0041  3A0F               	xorlw	15
   816  0042  1D03               	skipz
   817  0043  28B4               	goto	i1l881
   818  0044  284A               	goto	i1l831
   819  0045                     i1l144:	
   820                           ;main.c: 77: }
   821                           ;main.c: 81: }
   822                           
   823                           ;main.c: 76: counter_uart = 0;
   824                           
   825                           
   826                           ;main.c: 82: else{
   827                           ;main.c: 83: CREN = 0;
   828  0045  1218               	bcf	24,4	;volatile
   829                           
   830                           ;main.c: 84: tmp_data = RCREG;
   831  0046  081A               	movf	26,w	;volatile
   832  0047  00F6               	movwf	??_global_interrupt
   833  0048  0876               	movf	??_global_interrupt,w
   834  0049  00F5               	movwf	_tmp_data
   835  004A                     i1l831:	
   836                           
   837                           ;main.c: 85: counter_uart = 0;
   838  004A  01F0               	clrf	_counter_uart
   839  004B  28B4               	goto	i1l881
   840  004C                     i1l143:	
   841                           ;main.c: 88: return;
   842                           
   843                           ;main.c: 86: }
   844                           ;main.c: 87: GIE = 1;
   845                           
   846                           
   847                           ;main.c: 90: }
   848                           ;main.c: 93: if(T0IF){
   849  004C  1D0B               	btfss	11,2	;volatile
   850  004D  2888               	goto	i1l149
   851                           
   852                           ;main.c: 94: T0IF = 0;
   853  004E  110B               	bcf	11,2	;volatile
   854                           
   855                           ;main.c: 97: if(loop1 == 2){
   856  004F  3002               	movlw	2
   857  0050  0644               	xorwf	_loop1,w
   858  0051  0445               	iorwf	_loop1+1,w
   859  0052  1D03               	skipz
   860  0053  2859               	goto	i1l845
   861                           
   862                           ;main.c: 98: loop1 = 1;
   863  0054  3001               	movlw	1
   864  0055  00C4               	movwf	_loop1
   865  0056  3000               	movlw	0
   866  0057  00C5               	movwf	_loop1+1
   867  0058  2860               	goto	L3
   868  0059                     i1l845:	
   869                           ;main.c: 100: }
   870                           
   871                           ;main.c: 99: TMR0 = 0;
   872                           
   873                           
   874                           ;main.c: 101: else if(loop1 == 1){
   875  0059  3001               	movlw	1
   876  005A  0644               	xorwf	_loop1,w
   877  005B  0445               	iorwf	_loop1+1,w
   878  005C  1D03               	skipz
   879  005D  2862               	goto	i1l849
   880                           
   881                           ;main.c: 102: loop1 = 0;
   882  005E  01C4               	clrf	_loop1
   883  005F  01C5               	clrf	_loop1+1
   884  0060                     L3:	
   885                           
   886                           ;main.c: 103: TMR0 = 0;
   887  0060  0181               	clrf	1	;volatile
   888                           
   889                           ;main.c: 104: }
   890  0061  28B4               	goto	i1l881
   891  0062                     i1l849:	
   892                           
   893                           ;main.c: 105: else{
   894                           ;main.c: 106: TMR0 = motor1Array[motor1];
   895  0062  0872               	movf	_motor1,w
   896  0063  3E01               	addlw	low (_motor1Array-__stringbase)
   897  0064  0084               	movwf	4
   898  0065  214F               	fcall	stringdir
   899  0066  0081               	movwf	1	;volatile
   900                           
   901                           ;main.c: 107: loop1 = incremental1;
   902  0067  0871               	movf	_incremental1,w
   903  0068  00F6               	movwf	??_global_interrupt
   904  0069  01F7               	clrf	??_global_interrupt+1
   905  006A  0876               	movf	??_global_interrupt,w
   906  006B  00C4               	movwf	_loop1
   907  006C  0877               	movf	??_global_interrupt+1,w
   908  006D  00C5               	movwf	_loop1+1
   909                           
   910                           ;main.c: 108: counter1 += direction1;
   911  006E  083E               	movf	_direction1,w
   912  006F  07B8               	addwf	_counter1,f
   913  0070  1803               	skipnc
   914  0071  0AB9               	incf	_counter1+1,f
   915  0072  083F               	movf	_direction1+1,w
   916  0073  07B9               	addwf	_counter1+1,f
   917                           
   918                           ;main.c: 109: if(counter1 == 8)
   919  0074  3008               	movlw	8
   920  0075  0638               	xorwf	_counter1,w
   921  0076  0439               	iorwf	_counter1+1,w
   922  0077  1D03               	skipz
   923  0078  287C               	goto	i1l154
   924                           
   925                           ;main.c: 110: counter1 = 0;
   926  0079  01B8               	clrf	_counter1
   927  007A  01B9               	clrf	_counter1+1
   928  007B  2882               	goto	i1l861
   929  007C                     i1l154:	
   930                           
   931                           ;main.c: 111: else if(counter1 < 0)
   932  007C  1FB9               	btfss	_counter1+1,7
   933  007D  2882               	goto	i1l861
   934                           
   935                           ;main.c: 112: counter1 = 8;
   936  007E  3008               	movlw	8
   937  007F  00B8               	movwf	_counter1
   938  0080  3000               	movlw	0
   939  0081  00B9               	movwf	_counter1+1
   940  0082                     i1l861:	
   941                           
   942                           ;main.c: 113: PORTA = posArray1[counter1];
   943  0082  0838               	movf	_counter1,w
   944  0083  3E2E               	addlw	low (_posArray1-__stringbase)
   945  0084  0084               	movwf	4
   946  0085  214F               	fcall	stringdir
   947  0086  0085               	movwf	5	;volatile
   948  0087  28B4               	goto	i1l881
   949  0088                     i1l149:	
   950                           ;main.c: 117: return;
   951                           
   952                           ;main.c: 115: }
   953                           ;main.c: 116: GIE = 1 ;
   954                           
   955                           
   956                           ;main.c: 119: }
   957                           ;main.c: 122: if(T1IF){
   958  0088  1C0C               	btfss	12,0	;volatile
   959  0089  28A9               	goto	i1l879
   960                           
   961                           ;main.c: 123: T1IF = 0;
   962  008A  100C               	bcf	12,0	;volatile
   963                           
   964                           ;main.c: 125: counter2 += direction2;
   965  008B  0840               	movf	_direction2,w
   966  008C  07BA               	addwf	_counter2,f
   967  008D  1803               	skipnc
   968  008E  0ABB               	incf	_counter2+1,f
   969  008F  0841               	movf	_direction2+1,w
   970  0090  07BB               	addwf	_counter2+1,f
   971                           
   972                           ;main.c: 127: if(counter2 == 8)
   973  0091  3008               	movlw	8
   974  0092  063A               	xorwf	_counter2,w
   975  0093  043B               	iorwf	_counter2+1,w
   976  0094  1D03               	skipz
   977  0095  2899               	goto	i1l158
   978                           
   979                           ;main.c: 128: counter2 = 0;
   980  0096  01BA               	clrf	_counter2
   981  0097  01BB               	clrf	_counter2+1
   982  0098  289F               	goto	i1l875
   983  0099                     i1l158:	
   984                           
   985                           ;main.c: 129: else if(counter2 < 0)
   986  0099  1FBB               	btfss	_counter2+1,7
   987  009A  289F               	goto	i1l875
   988                           
   989                           ;main.c: 130: counter2 = 8;
   990  009B  3008               	movlw	8
   991  009C  00BA               	movwf	_counter2
   992  009D  3000               	movlw	0
   993  009E  00BB               	movwf	_counter2+1
   994  009F                     i1l875:	
   995                           
   996                           ;main.c: 132: TMR1H = motor2_1Array[motor2];
   997  009F  0873               	movf	_motor2,w
   998  00A0  3E10               	addlw	low (_motor2_1Array-__stringbase)
   999  00A1  0084               	movwf	4
  1000  00A2  214F               	fcall	stringdir
  1001  00A3  008F               	movwf	15	;volatile
  1002                           
  1003                           ;main.c: 133: TMR1L = motor2_2Array[motor2];
  1004  00A4  0873               	movf	_motor2,w
  1005  00A5  3E1F               	addlw	low (_motor2_2Array-__stringbase)
  1006  00A6  0084               	movwf	4
  1007  00A7  214F               	fcall	stringdir
  1008  00A8  008E               	movwf	14	;volatile
  1009  00A9                     i1l879:	
  1010                           
  1011                           ;main.c: 136: }
  1012                           ;main.c: 138: PORTC = posArray2[counter2] | posArray3[counter3];
  1013  00A9  083C               	movf	_counter3,w
  1014  00AA  3E3E               	addlw	low (_posArray3-__stringbase)
  1015  00AB  0084               	movwf	4
  1016  00AC  214F               	fcall	stringdir
  1017  00AD  00F6               	movwf	??_global_interrupt
  1018  00AE  083A               	movf	_counter2,w
  1019  00AF  3E36               	addlw	low (_posArray2-__stringbase)
  1020  00B0  0084               	movwf	4
  1021  00B1  214F               	fcall	stringdir
  1022  00B2  0476               	iorwf	??_global_interrupt,w
  1023  00B3  0087               	movwf	7	;volatile
  1024  00B4                     i1l881:	
  1025                           
  1026                           ;main.c: 141: GIE = 1 ;
  1027  00B4  178B               	bsf	11,7	;volatile
  1028                           
  1029                           ;main.c: 142: return;
  1030  00B5  087B               	movf	??_global_interrupt+5,w
  1031  00B6  00FF               	movwf	127
  1032  00B7  087A               	movf	??_global_interrupt+4,w
  1033  00B8  008A               	movwf	10
  1034  00B9  0879               	movf	??_global_interrupt+3,w
  1035  00BA  0084               	movwf	4
  1036  00BB  0E78               	swapf	(??_global_interrupt+2)^(0+-128),w
  1037  00BC  0083               	movwf	3
  1038  00BD  0EFE               	swapf	126,f
  1039  00BE  0E7E               	swapf	126,w
  1040  00BF  0009               	retfie
  1041  00C0                     __end_of_global_interrupt:	
  1042  007E                     btemp	set	126	;btemp
  1043  007E                     wtemp	set	126
  1044  007E                     wtemp0	set	126
  1045  0080                     wtemp1	set	128
  1046  0082                     wtemp2	set	130
  1047  0084                     wtemp3	set	132
  1048  0086                     wtemp4	set	134
  1049  0088                     wtemp5	set	136
  1050  007F                     wtemp6	set	127
  1051  007E                     ttemp	set	126
  1052  007E                     ttemp0	set	126
  1053  0081                     ttemp1	set	129
  1054  0084                     ttemp2	set	132
  1055  0087                     ttemp3	set	135
  1056  007F                     ttemp4	set	127
  1057  007E                     ltemp	set	126
  1058  007E                     ltemp0	set	126
  1059  0082                     ltemp1	set	130
  1060  0086                     ltemp2	set	134
  1061  0080                     ltemp3	set	128
  1062                           
  1063                           	psect	intentry
  1064  0004                     __pintentry:	
  1065                           ;incstack = 0
  1066                           ; Regs used in _global_interrupt: [wreg-fsr0h+status,2+status,0+pclath]
  1067                           
  1068  0004                     interrupt_function:	
  1069  007E                     saved_w	set	btemp
  1070  0004  00FE               	movwf	btemp
  1071  0005  0E03               	swapf	3,w
  1072  0006  00F8               	movwf	??_global_interrupt+2
  1073  0007  0804               	movf	4,w
  1074  0008  00F9               	movwf	??_global_interrupt+3
  1075  0009  080A               	movf	10,w
  1076  000A  00FA               	movwf	??_global_interrupt+4
  1077  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1078  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1079  000D  087F               	movf	btemp+1,w
  1080  000E  00FB               	movwf	??_global_interrupt+5
  1081  000F  2825               	ljmp	_global_interrupt


Data Sizes:
    Strings     0
    Constant    69
    Data        24
    BSS         27
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80      1      46
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _global_interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _global_interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_interrupt in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _global_interrupt                                     6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _global_interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       0       6        0.0%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      1      2E       4       57.5%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3B       8        0.0%
ABS                  0      0      3B       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sat May 23 23:59:32 2015

                        pc 0002                __CFG_CP$OFF 0000                         fsr 0004  
                      _GIE 005F               __CFG_CPD$OFF 0000                        fsr0 0004  
                      indf 0000               __CFG_IESO$ON 0000                       l1053 0113  
                     l1045 0102                       l1063 012B                       l1065 012C  
                     l1075 0141                       l1059 0124                       _BRGH 04C2  
                     _T0IE 005D                       _T0IF 005A                       _CREN 00C4  
                     _FERR 00C2                       _T1IF 0060                       _PEIE 005E  
                     _RCIE 0465                       _RCIF 0065                       _OERR 00C1  
                     _TMR0 0001                       _SPEN 00C7                       _SYNC 04C4  
            __CFG_FCMEN$ON 0000                       _main 00C0                       _tmp1 007C  
                     _tmp2 0074                       _tmp3 004B                       btemp 007E  
            __CFG_BOREN$ON 0000                       ltemp 007E                       start 0010  
                     ttemp 007E                       wtemp 007E                      ?_main 0076  
                    _BRG16 04DB              __CFG_WDTE$OFF 0000                      _ANSEL 011E  
                    i1l143 004C                      i1l144 0045                      i1l154 007C  
                    i1l149 0088                      i1l158 0099                      i1l831 004A  
                    i1l861 0082                      i1l845 0059                      i1l881 00B4  
                    i1l849 0062                      i1l875 009F                      i1l879 00A9  
                    _RCREG 001A                      _TMR1H 000F                      _TMR1L 000E  
                    _SPBRG 0099                      _PORTA 0005                      _PORTC 0007  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
            __CFG_PWRTE$ON 0000                      _loop1 0044                      _loop3 0046  
                    pclath 000A                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080                      ttemp0 007E  
                    ttemp1 0081                      ttemp2 0084                      ttemp3 0087  
                    ttemp4 007F                      status 0003                      wtemp0 007E  
                    wtemp1 0080                      wtemp2 0082                      wtemp3 0084  
                    wtemp4 0086                      wtemp5 0088                      wtemp6 007F  
           __CFG_MCLRE$OFF 0000            __initialization 0011               __end_of_main 014F  
                   ??_main 004D                     _ANSELH 011F                     _OSCCON 008F  
                   _TMR1GE 0086                     _TMR1IE 0460                     _TMR1CS 0081  
                   _SPBRGH 009A                     _TMR1ON 0080      __end_of_motor2_1Array 0173  
    __end_of_motor2_2Array 0182                     _motor1 0072                     _motor2 0073  
                   _motor3 004A                     saved_w 007E    __end_of__initialization 0023  
__size_of_global_interrupt 009B             __pcstackCOMMON 0076               __pidataBANK0 019A  
               __pbssBANK0 0038              _init_received 0049                 __pnvCOMMON 007C  
               __pmaintext 00C0                 __pintentry 0004                 _direction1 003E  
               _direction2 0040                    _T1OSCEN 0083                 _direction3 0042  
                  _OSCTUNE 0090                 __stringtab 014F                    __ptext1 0025  
                _T1CONbits 0010                    clrloop0 01C2       end_of_initialization 0023  
        __end_of_posArray1 018A          __end_of_posArray2 0192          __end_of_posArray3 019A  
         _global_interrupt 0025                 _motor1stop 0033                 _motor2stop 0035  
               _motor3stop 0037                 _motor_data 002F        start_initialization 0011  
             _counter_uart 0070                 init_fetch0 01B2               _incremental1 0071  
             _incremental3 0048                __pdataBANK0 0020                __pbssCOMMON 0070  
                ___latbits 0000              __pcstackBANK0 004D              _motor2_1Array 0164  
            _motor2_2Array 0173                  __pstrings 014F   __end_of_global_interrupt 00C0  
        interrupt_function 0004                  clear_ram0 01C1                  _posArray1 0182  
                _posArray2 018A                  _posArray3 0192                  _uart_data 0020  
                _tmp_data2 004C                __stringbase 0154        __end_of_motor1Array 0164  
       __end_of__stringtab 0155                   _counter1 0038                   _counter2 003A  
                 _counter3 003C              __size_of_main 008F                   _tmp_data 0075  
                 init_ram0 01B6                   intlevel1 0000                _motor1Array 0155  
              _motor1_data 0032                _motor2_data 0034                _motor3_data 0036  
                stringcode 014F                 _OPTION_REG 0081                   stringdir 014F  
        ?_global_interrupt 0076                   stringtab 014F         ??_global_interrupt 0076  
        __CFG_FOSC$INTRCIO 0000  
