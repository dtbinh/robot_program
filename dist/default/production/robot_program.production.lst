

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sat May 23 23:53:07 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F687
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  000A                     	;# 
    28  000B                     	;# 
    29  000C                     	;# 
    30  000D                     	;# 
    31  000E                     	;# 
    32  000E                     	;# 
    33  000F                     	;# 
    34  0010                     	;# 
    35  0013                     	;# 
    36  0014                     	;# 
    37  0018                     	;# 
    38  0019                     	;# 
    39  001A                     	;# 
    40  001E                     	;# 
    41  001F                     	;# 
    42  0081                     	;# 
    43  0085                     	;# 
    44  0086                     	;# 
    45  0087                     	;# 
    46  008C                     	;# 
    47  008D                     	;# 
    48  008E                     	;# 
    49  008F                     	;# 
    50  0090                     	;# 
    51  0093                     	;# 
    52  0093                     	;# 
    53  0093                     	;# 
    54  0094                     	;# 
    55  0095                     	;# 
    56  0095                     	;# 
    57  0096                     	;# 
    58  0096                     	;# 
    59  0097                     	;# 
    60  0098                     	;# 
    61  0099                     	;# 
    62  009A                     	;# 
    63  009B                     	;# 
    64  009E                     	;# 
    65  009F                     	;# 
    66  010C                     	;# 
    67  010C                     	;# 
    68  010D                     	;# 
    69  0115                     	;# 
    70  0116                     	;# 
    71  0118                     	;# 
    72  0119                     	;# 
    73  011A                     	;# 
    74  011B                     	;# 
    75  011E                     	;# 
    76  011F                     	;# 
    77  018C                     	;# 
    78  018D                     	;# 
    79  019E                     	;# 
    80                           
    81                           	psect	idataBANK0
    82  014D                     __pidataBANK0:	
    83                           
    84                           ;initializer for _uart_data
    85  014D  342D               	retlw	45
    86  014E  342D               	retlw	45
    87  014F  342D               	retlw	45
    88  0150  342D               	retlw	45
    89  0151  342D               	retlw	45
    90  0152  342D               	retlw	45
    91  0153  342D               	retlw	45
    92  0154  342D               	retlw	45
    93  0155  342D               	retlw	45
    94  0156  342D               	retlw	45
    95  0157  342D               	retlw	45
    96  0158  342D               	retlw	45
    97  0159  342D               	retlw	45
    98  015A  342D               	retlw	45
    99  015B  342D               	retlw	45
   100                           
   101                           ;initializer for _motor_data
   102  015C  342D               	retlw	45
   103  015D  342D               	retlw	45
   104  015E  342D               	retlw	45
   105                           
   106                           ;initializer for _motor1_data
   107  015F  342D               	retlw	45
   108                           
   109                           ;initializer for _motor1stop
   110  0160  3401               	retlw	1
   111                           
   112                           ;initializer for _motor2_data
   113  0161  342D               	retlw	45
   114                           
   115                           ;initializer for _motor2stop
   116  0162  3401               	retlw	1
   117                           
   118                           ;initializer for _motor3_data
   119  0163  342D               	retlw	45
   120                           
   121                           ;initializer for _motor3stop
   122  0164  3401               	retlw	1
   123                           
   124                           	psect	strings
   125  0102                     __pstrings:	
   126  0102                     stringtab:	
   127  0102                     __stringtab:	
   128  0102                     stringcode:	
   129                           ;	String table - string pointers are 1 byte each
   130                           
   131  0102                     stringdir:	
   132  0102  3001               	movlw	high stringdir
   133  0103  008A               	movwf	10
   134  0104  0804               	movf	4,w
   135  0105  0A84               	incf	4,f
   136  0106  0782               	addwf	2,f
   137  0107                     __stringbase:	
   138  0107  3400               	retlw	0
   139  0108                     __end_of__stringtab:	
   140  0108                     _motor1Array:	
   141  0108  340F               	retlw	15
   142  0109  3487               	retlw	135
   143  010A  3405               	retlw	5
   144  010B  3443               	retlw	67
   145  010C  3469               	retlw	105
   146  010D  3482               	retlw	130
   147  010E  3494               	retlw	148
   148  010F  34A1               	retlw	161
   149  0110  34AC               	retlw	172
   150  0111  34B4               	retlw	180
   151  0112  34BB               	retlw	187
   152  0113  34C0               	retlw	192
   153  0114  34C5               	retlw	197
   154  0115  34C9               	retlw	201
   155  0116  34CD               	retlw	205
   156  0117                     __end_of_motor1Array:	
   157  0117                     _motor2_1Array:	
   158  0117  34A2               	retlw	162
   159  0118  34D1               	retlw	209
   160  0119  34E0               	retlw	224
   161  011A  34E8               	retlw	232
   162  011B  34ED               	retlw	237
   163  011C  34F0               	retlw	240
   164  011D  34F2               	retlw	242
   165  011E  34F4               	retlw	244
   166  011F  34F5               	retlw	245
   167  0120  34F6               	retlw	246
   168  0121  34F7               	retlw	247
   169  0122  34F8               	retlw	248
   170  0123  34F8               	retlw	248
   171  0124  34F9               	retlw	249
   172  0125  34F9               	retlw	249
   173  0126                     __end_of_motor2_1Array:	
   174  0126                     _motor2_2Array:	
   175  0126  343F               	retlw	63
   176  0127  341F               	retlw	31
   177  0128  34BF               	retlw	191
   178  0129  348F               	retlw	143
   179  012A  343F               	retlw	63
   180  012B  345F               	retlw	95
   181  012C  349A               	retlw	154
   182  012D  3447               	retlw	71
   183  012E  3494               	retlw	148
   184  012F  349F               	retlw	159
   185  0130  3479               	retlw	121
   186  0131  342F               	retlw	47
   187  0132  34C9               	retlw	201
   188  0133  344D               	retlw	77
   189  0134  34BF               	retlw	191
   190  0135                     __end_of_motor2_2Array:	
   191  0135                     _posArray1:	
   192  0135  3411               	retlw	17
   193  0136  3401               	retlw	1
   194  0137  3403               	retlw	3
   195  0138  3402               	retlw	2
   196  0139  3406               	retlw	6
   197  013A  3404               	retlw	4
   198  013B  3414               	retlw	20
   199  013C  3410               	retlw	16
   200  013D                     __end_of_posArray1:	
   201  013D                     _posArray2:	
   202  013D  3409               	retlw	9
   203  013E  3401               	retlw	1
   204  013F  3403               	retlw	3
   205  0140  3402               	retlw	2
   206  0141  3406               	retlw	6
   207  0142  3404               	retlw	4
   208  0143  340C               	retlw	12
   209  0144  3408               	retlw	8
   210  0145                     __end_of_posArray2:	
   211  0145                     _posArray3:	
   212  0145  3490               	retlw	144
   213  0146  3410               	retlw	16
   214  0147  3430               	retlw	48
   215  0148  3420               	retlw	32
   216  0149  3460               	retlw	96
   217  014A  3440               	retlw	64
   218  014B  34C0               	retlw	192
   219  014C  3480               	retlw	128
   220  014D                     __end_of_posArray3:	
   221                           
   222                           	psect	nvCOMMON
   223  007C                     __pnvCOMMON:	
   224  007C                     _tmp1:	
   225  007C                     	ds	1
   226  0005                     _PORTA	set	5
   227  001A                     _RCREG	set	26
   228  0010                     _T1CONbits	set	16
   229  0001                     _TMR0	set	1
   230  000F                     _TMR1H	set	15
   231  00C4                     _CREN	set	196
   232  00C2                     _FERR	set	194
   233  005F                     _GIE	set	95
   234  00C1                     _OERR	set	193
   235  005E                     _PEIE	set	94
   236  0065                     _RCIF	set	101
   237  00C7                     _SPEN	set	199
   238  005D                     _T0IE	set	93
   239  005A                     _T0IF	set	90
   240  0083                     _T1OSCEN	set	131
   241  0081                     _TMR1CS	set	129
   242  0086                     _TMR1GE	set	134
   243  0080                     _TMR1ON	set	128
   244  0081                     _OPTION_REG	set	129
   245  008F                     _OSCCON	set	143
   246  0090                     _OSCTUNE	set	144
   247  0099                     _SPBRG	set	153
   248  009A                     _SPBRGH	set	154
   249  0085                     _TRISA	set	133
   250  0086                     _TRISB	set	134
   251  0087                     _TRISC	set	135
   252  04DB                     _BRG16	set	1243
   253  04C2                     _BRGH	set	1218
   254  0465                     _RCIE	set	1125
   255  04C4                     _SYNC	set	1220
   256  011E                     _ANSEL	set	286
   257  011F                     _ANSELH	set	287
   258                           
   259                           ; #config settings
   260  0000                     
   261                           	psect	cinit
   262  0011                     start_initialization:	
   263  0011                     __initialization:	
   264                           
   265                           ; Clear objects allocated to COMMON
   266  0011  3070               	movlw	low __pbssCOMMON
   267  0012  0084               	movwf	4
   268  0013  3076               	movlw	low (__pbssCOMMON+6)
   269  0014  2174               	fcall	clear_ram0
   270                           
   271                           ; Clear objects allocated to BANK0
   272  0015  1383               	bcf	3,7	;select IRP bank0
   273  0016  3038               	movlw	low __pbssBANK0
   274  0017  0084               	movwf	4
   275  0018  304D               	movlw	low (__pbssBANK0+21)
   276  0019  2174               	fcall	clear_ram0
   277                           
   278                           ; Initialize objects allocated to BANK0
   279  001A  3038               	movlw	low (__pdataBANK0+24)
   280  001B  00FD               	movwf	btemp+-1
   281  001C  3001               	movlw	high __pidataBANK0
   282  001D  00FE               	movwf	btemp
   283  001E  304D               	movlw	low __pidataBANK0
   284  001F  00FF               	movwf	btemp+1
   285  0020  3020               	movlw	low __pdataBANK0
   286  0021  0084               	movwf	4
   287  0022  2169               	fcall	init_ram0
   288  0023                     end_of_initialization:	
   289                           ;End of C runtime variable initialization code
   290                           
   291  0023                     __end_of__initialization:	
   292  0023  0183               	clrf	3
   293  0024  2825               	ljmp	_main	;jump to C main() function
   294                           
   295                           	psect	bssCOMMON
   296  0070                     __pbssCOMMON:	
   297  0070                     _counter1:	
   298  0070                     	ds	2
   299  0072                     _counter_uart:	
   300  0072                     	ds	1
   301  0073                     _incremental1:	
   302  0073                     	ds	1
   303  0074                     _motor1:	
   304  0074                     	ds	1
   305  0075                     _tmp_data:	
   306  0075                     	ds	1
   307                           
   308                           	psect	bssBANK0
   309  0038                     __pbssBANK0:	
   310  0038                     _counter2:	
   311  0038                     	ds	2
   312  003A                     _counter3:	
   313  003A                     	ds	2
   314  003C                     _direction1:	
   315  003C                     	ds	2
   316  003E                     _direction2:	
   317  003E                     	ds	2
   318  0040                     _direction3:	
   319  0040                     	ds	2
   320  0042                     _loop1:	
   321  0042                     	ds	2
   322  0044                     _loop3:	
   323  0044                     	ds	2
   324  0046                     _incremental3:	
   325  0046                     	ds	1
   326  0047                     _init_received:	
   327  0047                     	ds	1
   328  0048                     _motor2:	
   329  0048                     	ds	1
   330  0049                     _motor3:	
   331  0049                     	ds	1
   332  004A                     _tmp2:	
   333  004A                     	ds	1
   334  004B                     _tmp3:	
   335  004B                     	ds	1
   336  004C                     _tmp_data2:	
   337  004C                     	ds	1
   338                           
   339                           	psect	dataBANK0
   340  0020                     __pdataBANK0:	
   341  0020                     _uart_data:	
   342  0020                     	ds	15
   343  002F                     _motor_data:	
   344  002F                     	ds	3
   345  0032                     _motor1_data:	
   346  0032                     	ds	1
   347  0033                     _motor1stop:	
   348  0033                     	ds	1
   349  0034                     _motor2_data:	
   350  0034                     	ds	1
   351  0035                     _motor2stop:	
   352  0035                     	ds	1
   353  0036                     _motor3_data:	
   354  0036                     	ds	1
   355  0037                     _motor3stop:	
   356  0037                     	ds	1
   357                           
   358                           	psect	clrtext
   359  0174                     clear_ram0:	
   360                           ;	Called with FSR containing the base address, and
   361                           ;	W with the last address+1
   362                           
   363  0174  0064               	clrwdt	;clear the watchdog before getting into this loop
   364  0175                     clrloop0:	
   365  0175  0180               	clrf	0	;clear RAM location pointed to by FSR
   366  0176  0A84               	incf	4,f	;increment pointer
   367  0177  0604               	xorwf	4,w	;XOR with final address
   368  0178  1903               	btfsc	3,2	;have we reached the end yet?
   369  0179  3400               	retlw	0	;all done for this memory range, return
   370  017A  0604               	xorwf	4,w	;XOR again to restore value
   371  017B  2975               	goto	clrloop0	;do the next byte
   372                           
   373                           	psect	inittext
   374  0165                     init_fetch0:	
   375                           ;	Called with low address in FSR and high address in W
   376                           
   377  0165  087E               	movf	126,w
   378  0166  008A               	movwf	10
   379  0167  087F               	movf	127,w
   380  0168  0082               	movwf	2
   381  0169                     init_ram0:	
   382                           ;Called with:
   383                           ;	high address of idata address in btemp 
   384                           ;	low address of idata address in btemp+1 
   385                           ;	low address of data in FSR
   386                           ;	high address + 1 of data in btemp-1
   387                           
   388  0169  2165               	fcall	init_fetch0
   389  016A  0080               	movwf	0
   390  016B  0A84               	incf	4,f
   391  016C  0804               	movf	4,w
   392  016D  067D               	xorwf	125,w
   393  016E  1903               	btfsc	3,2
   394  016F  3400               	retlw	0
   395  0170  0AFF               	incf	127,f
   396  0171  1903               	btfsc	3,2
   397  0172  0AFE               	incf	126,f
   398  0173  2969               	goto	init_ram0
   399                           
   400                           	psect	cstackCOMMON
   401  0076                     __pcstackCOMMON:	
   402  0076                     ?_global_interrupt:	
   403  0076                     ??_global_interrupt:	
   404                           ; 0 bytes @ 0x0
   405                           
   406  0076                     ?_main:	
   407                           ; 0 bytes @ 0x0
   408                           
   409                           
   410                           ; 2 bytes @ 0x0
   411  0076                     	ds	6
   412                           
   413                           	psect	cstackBANK0
   414  004D                     __pcstackBANK0:	
   415  004D                     ??_main:	
   416                           
   417                           ; 0 bytes @ 0x0
   418  004D                     	ds	1
   419                           
   420                           	psect	maintext
   421  0025                     __pmaintext:	
   422 ;;
   423 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   424 ;;
   425 ;; *************** function _main *****************
   426 ;; Defined at:
   427 ;;		line 155 in file "main.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;		None
   430 ;; Auto vars:     Size  Location     Type
   431 ;;		None
   432 ;; Return value:  Size  Location     Type
   433 ;;                  2  150[COMMON] int 
   434 ;; Registers used:
   435 ;;		wreg, status,2, status,0
   436 ;; Tracked objects:
   437 ;;		On entry : 17F/0
   438 ;;		On exit  : 0/0
   439 ;;		Unchanged: 0/0
   440 ;; Data sizes:     COMMON   BANK0   BANK1
   441 ;;      Params:         0       0       0
   442 ;;      Locals:         0       0       0
   443 ;;      Temps:          0       1       0
   444 ;;      Totals:         0       1       0
   445 ;;Total ram usage:        1 bytes
   446 ;; Hardware stack levels required when called:    2
   447 ;; This function calls:
   448 ;;		Nothing
   449 ;; This function is called by:
   450 ;;		Startup code after reset
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454                           
   455                           ;psect for function _main
   456  0025                     _main:	
   457                           
   458                           ;main.c: 157: OSCCON = 0x00;
   459                           
   460                           ;incstack = 0
   461                           ; Regs used in _main: [wreg+status,2+status,0]
   462  0025  1683               	bsf	3,5	;RP0=1, select bank1
   463  0026  1303               	bcf	3,6	;RP1=0, select bank1
   464  0027  018F               	clrf	15	;volatile
   465                           
   466                           ;main.c: 158: OSCCON |= 0b01110001;
   467  0028  3071               	movlw	113
   468  0029  1283               	bcf	3,5	;RP0=0, select bank0
   469  002A  1303               	bcf	3,6	;RP1=0, select bank0
   470  002B  00CD               	movwf	??_main
   471  002C  084D               	movf	??_main,w
   472  002D  1683               	bsf	3,5	;RP0=1, select bank1
   473  002E  1303               	bcf	3,6	;RP1=0, select bank1
   474  002F  048F               	iorwf	15,f	;volatile
   475                           
   476                           ;main.c: 159: OSCTUNE = 0x00;
   477  0030  0190               	clrf	16	;volatile
   478                           
   479                           ;main.c: 163: OPTION_REG &= 0b11010000;
   480  0031  30D0               	movlw	208
   481  0032  1283               	bcf	3,5	;RP0=0, select bank0
   482  0033  1303               	bcf	3,6	;RP1=0, select bank0
   483  0034  00CD               	movwf	??_main
   484  0035  084D               	movf	??_main,w
   485  0036  1683               	bsf	3,5	;RP0=1, select bank1
   486  0037  1303               	bcf	3,6	;RP1=0, select bank1
   487  0038  0581               	andwf	1,f	;volatile
   488                           
   489                           ;main.c: 164: OPTION_REG |= 0b00000100;
   490  0039  1501               	bsf	1,2	;volatile
   491                           
   492                           ;main.c: 165: TMR0 = 0x00;
   493  003A  1283               	bcf	3,5	;RP0=0, select bank0
   494  003B  1303               	bcf	3,6	;RP1=0, select bank0
   495  003C  0181               	clrf	1	;volatile
   496                           
   497                           ;main.c: 166: T0IE = 1;
   498  003D  168B               	bsf	11,5	;volatile
   499                           
   500                           ;main.c: 171: TMR1GE = 0;
   501  003E  1310               	bcf	16,6	;volatile
   502                           
   503                           ;main.c: 172: T1CONbits.T1CKPS0 = 0;
   504  003F  1210               	bcf	16,4	;volatile
   505                           
   506                           ;main.c: 173: T1CONbits.T1CKPS1 = 0;
   507  0040  1290               	bcf	16,5	;volatile
   508                           
   509                           ;main.c: 174: T1OSCEN = 0;
   510  0041  1190               	bcf	16,3	;volatile
   511                           
   512                           ;main.c: 175: TMR1CS = 0;
   513  0042  1090               	bcf	16,1	;volatile
   514                           
   515                           ;main.c: 176: TMR1ON = 1;
   516  0043  1410               	bsf	16,0	;volatile
   517                           
   518                           ;main.c: 177: TMR1H = 0x00;
   519  0044  018F               	clrf	15	;volatile
   520                           
   521                           ;main.c: 178: TMR1H = 0x00;
   522  0045  018F               	clrf	15	;volatile
   523                           
   524                           ;main.c: 185: BRG16 = 0;
   525  0046  1683               	bsf	3,5	;RP0=1, select bank1
   526  0047  1303               	bcf	3,6	;RP1=0, select bank1
   527  0048  119B               	bcf	27,3	;volatile
   528                           
   529                           ;main.c: 186: BRGH = 0;
   530  0049  1118               	bcf	24,2	;volatile
   531                           
   532                           ;main.c: 187: SPBRGH = 0;
   533  004A  019A               	clrf	26	;volatile
   534                           
   535                           ;main.c: 188: SPBRG = 0x0C;
   536  004B  300C               	movlw	12
   537  004C  0099               	movwf	25	;volatile
   538                           
   539                           ;main.c: 190: SYNC = 0;
   540  004D  1218               	bcf	24,4	;volatile
   541                           
   542                           ;main.c: 191: SPEN = 1;
   543  004E  1283               	bcf	3,5	;RP0=0, select bank0
   544  004F  1303               	bcf	3,6	;RP1=0, select bank0
   545  0050  1798               	bsf	24,7	;volatile
   546                           
   547                           ;main.c: 192: RCIE = 1;
   548  0051  1683               	bsf	3,5	;RP0=1, select bank1
   549  0052  1303               	bcf	3,6	;RP1=0, select bank1
   550  0053  168C               	bsf	12,5	;volatile
   551                           
   552                           ;main.c: 193: CREN = 1;
   553  0054  1283               	bcf	3,5	;RP0=0, select bank0
   554  0055  1303               	bcf	3,6	;RP1=0, select bank0
   555  0056  1618               	bsf	24,4	;volatile
   556                           
   557                           ;main.c: 213: TRISA = 0x00;
   558  0057  1683               	bsf	3,5	;RP0=1, select bank1
   559  0058  1303               	bcf	3,6	;RP1=0, select bank1
   560  0059  0185               	clrf	5	;volatile
   561                           
   562                           ;main.c: 214: TRISB = 0b00100000;
   563  005A  3020               	movlw	32
   564  005B  0086               	movwf	6	;volatile
   565                           
   566                           ;main.c: 215: TRISC = 0x00;
   567  005C  0187               	clrf	7	;volatile
   568                           
   569                           ;main.c: 216: ANSEL = 0x00;
   570  005D  1283               	bcf	3,5	;RP0=0, select bank2
   571  005E  1703               	bsf	3,6	;RP1=1, select bank2
   572  005F  019E               	clrf	30	;volatile
   573                           
   574                           ;main.c: 217: ANSELH = 0x00;
   575  0060  019F               	clrf	31	;volatile
   576                           
   577                           ;main.c: 220: PORTA = 0x00;
   578  0061  1283               	bcf	3,5	;RP0=0, select bank0
   579  0062  1303               	bcf	3,6	;RP1=0, select bank0
   580  0063  0185               	clrf	5	;volatile
   581                           
   582                           ;main.c: 221: PEIE = 1;
   583  0064  170B               	bsf	11,6	;volatile
   584                           
   585                           ;main.c: 222: GIE = 1;
   586  0065  178B               	bsf	11,7	;volatile
   587  0066                     l961:	
   588                           ;main.c: 224: while(1){
   589                           
   590                           
   591                           ;main.c: 227: tmp1 = uart_data[14];
   592  0066  082E               	movf	_uart_data+14,w
   593  0067  00CD               	movwf	??_main
   594  0068  084D               	movf	??_main,w
   595  0069  00FC               	movwf	_tmp1
   596                           
   597                           ;main.c: 230: if(tmp1 >=60){
   598  006A  303C               	movlw	60
   599  006B  027C               	subwf	_tmp1,w
   600  006C  1C03               	skipc
   601  006D  2877               	goto	l969
   602                           
   603                           ;main.c: 231: tmp1 = tmp1 - 15;
   604  006E  087C               	movf	_tmp1,w
   605  006F  3EF1               	addlw	241
   606  0070  00CD               	movwf	??_main
   607  0071  084D               	movf	??_main,w
   608  0072  00FC               	movwf	_tmp1
   609                           
   610                           ;main.c: 232: direction1 = -1;
   611  0073  30FF               	movlw	255
   612  0074  00BC               	movwf	_direction1
   613  0075  30FF               	movlw	255
   614  0076  287A               	goto	L1
   615  0077                     l969:	
   616                           ;main.c: 233: }
   617                           
   618                           
   619                           ;main.c: 234: else
   620                           ;main.c: 235: direction1 = 1;
   621  0077  3001               	movlw	1
   622  0078  00BC               	movwf	_direction1
   623  0079  3000               	movlw	0
   624  007A                     L1:	
   625  007A  00BD               	movwf	_direction1+1
   626                           
   627                           ;main.c: 237: tmp1 = tmp1 - 45;
   628  007B  087C               	movf	_tmp1,w
   629  007C  3ED3               	addlw	211
   630  007D  00CD               	movwf	??_main
   631  007E  084D               	movf	??_main,w
   632  007F  00FC               	movwf	_tmp1
   633                           
   634                           ;main.c: 238: if(tmp1 == 0)
   635  0080  08FC               	movf	_tmp1,f
   636  0081  1D03               	skipz
   637  0082  2888               	goto	l975
   638                           
   639                           ;main.c: 239: incremental1 = 2;
   640  0083  3002               	movlw	2
   641  0084  00CD               	movwf	??_main
   642  0085  084D               	movf	??_main,w
   643  0086  00F3               	movwf	_incremental1
   644  0087  2890               	goto	l981
   645  0088                     l975:	
   646                           
   647                           ;main.c: 240: else if(tmp1 == 1)
   648  0088  087C               	movf	_tmp1,w
   649  0089  3A01               	xorlw	1
   650  008A  1D03               	skipz
   651  008B  288F               	goto	l979
   652                           
   653                           ;main.c: 241: incremental1 = 1;
   654  008C  01F3               	clrf	_incremental1
   655  008D  0AF3               	incf	_incremental1,f
   656  008E  2890               	goto	l981
   657  008F                     l979:	
   658                           
   659                           ;main.c: 242: else
   660                           ;main.c: 243: incremental1 = 0;
   661  008F  01F3               	clrf	_incremental1
   662  0090                     l981:	
   663                           
   664                           ;main.c: 245: motor1 = tmp1;
   665  0090  087C               	movf	_tmp1,w
   666  0091  00CD               	movwf	??_main
   667  0092  084D               	movf	??_main,w
   668  0093  00F4               	movwf	_motor1
   669  0094  2866               	goto	l961
   670  0095                     __end_of_main:	
   671                           
   672                           	psect	text1
   673  0095                     __ptext1:	
   674 ;; *************** function _global_interrupt *****************
   675 ;; Defined at:
   676 ;;		line 56 in file "main.c"
   677 ;; Parameters:    Size  Location     Type
   678 ;;		None
   679 ;; Auto vars:     Size  Location     Type
   680 ;;		None
   681 ;; Return value:  Size  Location     Type
   682 ;;		None               void
   683 ;; Registers used:
   684 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMMON   BANK0   BANK1
   690 ;;      Params:         0       0       0
   691 ;;      Locals:         0       0       0
   692 ;;      Temps:          6       0       0
   693 ;;      Totals:         6       0       0
   694 ;;Total ram usage:        6 bytes
   695 ;; Hardware stack levels used:    2
   696 ;; This function calls:
   697 ;;		Nothing
   698 ;; This function is called by:
   699 ;;		Interrupt level 1
   700 ;; This function uses a non-reentrant model
   701 ;;
   702                           
   703                           
   704                           ;psect for function _global_interrupt
   705  0095                     _global_interrupt:	
   706                           
   707                           ;main.c: 58: GIE = 0 ;
   708  0095  138B               	bcf	11,7	;volatile
   709                           
   710                           ;main.c: 61: if(RCIF){
   711  0096  1E8C               	btfss	12,5	;volatile
   712  0097  28BB               	goto	i1l135
   713                           
   714                           ;main.c: 64: if(FERR == 0 && OERR == 0){
   715  0098  1D18               	btfss	24,2	;volatile
   716  0099  1898               	btfsc	24,1	;volatile
   717  009A  28B5               	goto	i1l781
   718                           
   719                           ;main.c: 65: tmp_data = RCREG;
   720  009B  081A               	movf	26,w	;volatile
   721  009C  00F6               	movwf	??_global_interrupt
   722  009D  0876               	movf	??_global_interrupt,w
   723  009E  00F5               	movwf	_tmp_data
   724                           
   725                           ;main.c: 68: if(tmp_data == 0x55){
   726  009F  0875               	movf	_tmp_data,w
   727  00A0  3A55               	xorlw	85
   728  00A1  1903               	btfsc	3,2
   729  00A2  28B9               	goto	L3
   730                           
   731                           ;main.c: 72: }
   732                           ;main.c: 74: uart_data[counter_uart] = tmp_data;
   733                           
   734                           ;main.c: 71: return;
   735                           
   736                           ;main.c: 70: GIE = 1;
   737                           
   738                           ;main.c: 69: counter_uart = 0;
   739  00A3  0875               	movf	_tmp_data,w
   740  00A4  00F6               	movwf	??_global_interrupt
   741  00A5  0872               	movf	_counter_uart,w
   742  00A6  3E20               	addlw	_uart_data& (0+255)
   743  00A7  0084               	movwf	4
   744  00A8  0876               	movf	??_global_interrupt,w
   745  00A9  1383               	bcf	3,7	;select IRP bank0
   746  00AA  0080               	movwf	0
   747                           
   748                           ;main.c: 75: counter_uart += 1;
   749  00AB  3001               	movlw	1
   750  00AC  00F6               	movwf	??_global_interrupt
   751  00AD  0876               	movf	??_global_interrupt,w
   752  00AE  07F2               	addwf	_counter_uart,f
   753                           
   754                           ;main.c: 76: if(counter_uart == 15){
   755  00AF  0872               	movf	_counter_uart,w
   756  00B0  3A0F               	xorlw	15
   757  00B1  1903               	btfsc	3,2
   758                           
   759                           ;main.c: 77: counter_uart = 0;
   760  00B2  01F2               	clrf	_counter_uart
   761                           
   762                           ;main.c: 78: }
   763                           ;main.c: 83: tmp_data = 0;
   764  00B3  01F5               	clrf	_tmp_data
   765                           
   766                           ;main.c: 86: }
   767  00B4  28F6               	goto	i1l815
   768  00B5                     i1l781:	
   769                           
   770                           ;main.c: 87: else{
   771                           ;main.c: 89: tmp_data = RCREG;
   772  00B5  081A               	movf	26,w	;volatile
   773  00B6  00F6               	movwf	??_global_interrupt
   774  00B7  0876               	movf	??_global_interrupt,w
   775  00B8  00F5               	movwf	_tmp_data
   776  00B9                     L3:	
   777                           
   778                           ;main.c: 90: counter_uart = 0;
   779  00B9  01F2               	clrf	_counter_uart
   780  00BA  28F6               	goto	i1l815
   781  00BB                     i1l135:	
   782                           ;main.c: 93: return;
   783                           
   784                           ;main.c: 91: }
   785                           ;main.c: 92: GIE = 1;
   786                           
   787                           
   788                           ;main.c: 95: }
   789                           ;main.c: 98: if(T0IF){
   790  00BB  1D0B               	btfss	11,2	;volatile
   791  00BC  28F7               	goto	i1l138
   792                           
   793                           ;main.c: 99: T0IF = 0;
   794  00BD  110B               	bcf	11,2	;volatile
   795                           
   796                           ;main.c: 102: if(loop1 == 2){
   797  00BE  3002               	movlw	2
   798  00BF  0642               	xorwf	_loop1,w
   799  00C0  0443               	iorwf	_loop1+1,w
   800  00C1  1D03               	skipz
   801  00C2  28C8               	goto	i1l797
   802                           
   803                           ;main.c: 103: loop1 = 1;
   804  00C3  3001               	movlw	1
   805  00C4  00C2               	movwf	_loop1
   806  00C5  3000               	movlw	0
   807  00C6  00C3               	movwf	_loop1+1
   808  00C7  28CF               	goto	L2
   809  00C8                     i1l797:	
   810                           ;main.c: 105: }
   811                           
   812                           ;main.c: 104: TMR0 = 0;
   813                           
   814                           
   815                           ;main.c: 106: else if(loop1 == 1){
   816  00C8  3001               	movlw	1
   817  00C9  0642               	xorwf	_loop1,w
   818  00CA  0443               	iorwf	_loop1+1,w
   819  00CB  1D03               	skipz
   820  00CC  28D1               	goto	i1l801
   821                           
   822                           ;main.c: 107: loop1 = 0;
   823  00CD  01C2               	clrf	_loop1
   824  00CE  01C3               	clrf	_loop1+1
   825  00CF                     L2:	
   826                           
   827                           ;main.c: 108: TMR0 = 0;
   828  00CF  0181               	clrf	1	;volatile
   829                           
   830                           ;main.c: 109: }
   831  00D0  28F6               	goto	i1l815
   832  00D1                     i1l801:	
   833                           
   834                           ;main.c: 110: else{
   835                           ;main.c: 111: TMR0 = motor1Array[motor1];
   836  00D1  0874               	movf	_motor1,w
   837  00D2  3E01               	addlw	low (_motor1Array-__stringbase)
   838  00D3  0084               	movwf	4
   839  00D4  2102               	fcall	stringdir
   840  00D5  0081               	movwf	1	;volatile
   841                           
   842                           ;main.c: 112: loop1 = incremental1;
   843  00D6  0873               	movf	_incremental1,w
   844  00D7  00F6               	movwf	??_global_interrupt
   845  00D8  01F7               	clrf	??_global_interrupt+1
   846  00D9  0876               	movf	??_global_interrupt,w
   847  00DA  00C2               	movwf	_loop1
   848  00DB  0877               	movf	??_global_interrupt+1,w
   849  00DC  00C3               	movwf	_loop1+1
   850                           
   851                           ;main.c: 113: counter1 += direction1;
   852  00DD  083C               	movf	_direction1,w
   853  00DE  07F0               	addwf	_counter1,f
   854  00DF  1803               	skipnc
   855  00E0  0AF1               	incf	_counter1+1,f
   856  00E1  083D               	movf	_direction1+1,w
   857  00E2  07F1               	addwf	_counter1+1,f
   858                           
   859                           ;main.c: 114: if(counter1 == 8)
   860  00E3  3008               	movlw	8
   861  00E4  0670               	xorwf	_counter1,w
   862  00E5  0471               	iorwf	_counter1+1,w
   863  00E6  1D03               	skipz
   864  00E7  28EB               	goto	i1l146
   865                           
   866                           ;main.c: 115: counter1 = 0;
   867  00E8  01F0               	clrf	_counter1
   868  00E9  01F1               	clrf	_counter1+1
   869  00EA  28F1               	goto	i1l813
   870  00EB                     i1l146:	
   871                           
   872                           ;main.c: 116: else if(counter1 < 0)
   873  00EB  1FF1               	btfss	_counter1+1,7
   874  00EC  28F1               	goto	i1l813
   875                           
   876                           ;main.c: 117: counter1 = 8;
   877  00ED  3008               	movlw	8
   878  00EE  00F0               	movwf	_counter1
   879  00EF  3000               	movlw	0
   880  00F0  00F1               	movwf	_counter1+1
   881  00F1                     i1l813:	
   882                           
   883                           ;main.c: 118: PORTA = posArray1[counter1];
   884  00F1  0870               	movf	_counter1,w
   885  00F2  3E2E               	addlw	low (_posArray1-__stringbase)
   886  00F3  0084               	movwf	4
   887  00F4  2102               	fcall	stringdir
   888  00F5  0085               	movwf	5	;volatile
   889  00F6                     i1l815:	
   890                           
   891                           ;main.c: 120: }
   892                           ;main.c: 121: GIE = 1 ;
   893  00F6  178B               	bsf	11,7	;volatile
   894  00F7                     i1l138:	
   895                           ;main.c: 122: return;
   896                           
   897  00F7  087B               	movf	??_global_interrupt+5,w
   898  00F8  00FF               	movwf	127
   899  00F9  087A               	movf	??_global_interrupt+4,w
   900  00FA  008A               	movwf	10
   901  00FB  0879               	movf	??_global_interrupt+3,w
   902  00FC  0084               	movwf	4
   903  00FD  0E78               	swapf	(??_global_interrupt+2)^(0+-128),w
   904  00FE  0083               	movwf	3
   905  00FF  0EFE               	swapf	126,f
   906  0100  0E7E               	swapf	126,w
   907  0101  0009               	retfie
   908  0102                     __end_of_global_interrupt:	
   909  007E                     btemp	set	126	;btemp
   910  007E                     wtemp	set	126
   911  007E                     wtemp0	set	126
   912  0080                     wtemp1	set	128
   913  0082                     wtemp2	set	130
   914  0084                     wtemp3	set	132
   915  0086                     wtemp4	set	134
   916  0088                     wtemp5	set	136
   917  007F                     wtemp6	set	127
   918  007E                     ttemp	set	126
   919  007E                     ttemp0	set	126
   920  0081                     ttemp1	set	129
   921  0084                     ttemp2	set	132
   922  0087                     ttemp3	set	135
   923  007F                     ttemp4	set	127
   924  007E                     ltemp	set	126
   925  007E                     ltemp0	set	126
   926  0082                     ltemp1	set	130
   927  0086                     ltemp2	set	134
   928  0080                     ltemp3	set	128
   929                           
   930                           	psect	intentry
   931  0004                     __pintentry:	
   932                           ;incstack = 0
   933                           ; Regs used in _global_interrupt: [wreg-fsr0h+status,2+status,0+pclath]
   934                           
   935  0004                     interrupt_function:	
   936  007E                     saved_w	set	btemp
   937  0004  00FE               	movwf	btemp
   938  0005  0E03               	swapf	3,w
   939  0006  00F8               	movwf	??_global_interrupt+2
   940  0007  0804               	movf	4,w
   941  0008  00F9               	movwf	??_global_interrupt+3
   942  0009  080A               	movf	10,w
   943  000A  00FA               	movwf	??_global_interrupt+4
   944  000B  1283               	bcf	3,5	;RP0=0, select bank0
   945  000C  1303               	bcf	3,6	;RP1=0, select bank0
   946  000D  087F               	movf	btemp+1,w
   947  000E  00FB               	movwf	??_global_interrupt+5
   948  000F  2895               	ljmp	_global_interrupt


Data Sizes:
    Strings     0
    Constant    69
    Data        24
    BSS         27
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80      1      46
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _global_interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _global_interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_interrupt in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _global_interrupt                                     6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _global_interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       0       6        0.0%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      1      2E       4       57.5%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3B       8        0.0%
ABS                  0      0      3B       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sat May 23 23:53:07 2015

                        pc 0002                __CFG_CP$OFF 0000                         fsr 0004  
                      l961 0066                        l981 0090                        l975 0088  
                      l969 0077                        l979 008F                        _GIE 005F  
             __CFG_CPD$OFF 0000                        fsr0 0004                        indf 0000  
             __CFG_IESO$ON 0000                       _BRGH 04C2                       _T0IE 005D  
                     _T0IF 005A                       _CREN 00C4                       _FERR 00C2  
                     _PEIE 005E                       _RCIE 0465                       _RCIF 0065  
                     _OERR 00C1                       _TMR0 0001                       _SPEN 00C7  
                     _SYNC 04C4              __CFG_FCMEN$ON 0000                       _main 0025  
                     _tmp1 007C                       _tmp2 004A                       _tmp3 004B  
                     btemp 007E              __CFG_BOREN$ON 0000                       ltemp 007E  
                     start 0010                       ttemp 007E                       wtemp 007E  
                    ?_main 0076                      _BRG16 04DB              __CFG_WDTE$OFF 0000  
                    _ANSEL 011E                      i1l135 00BB                      i1l146 00EB  
                    i1l138 00F7                      i1l801 00D1                      i1l813 00F1  
                    i1l815 00F6                      i1l781 00B5                      i1l797 00C8  
                    _RCREG 001A                      _TMR1H 000F                      _SPBRG 0099  
                    _PORTA 0005                      _TRISA 0085                      _TRISB 0086  
                    _TRISC 0087              __CFG_PWRTE$ON 0000                      _loop1 0042  
                    _loop3 0044                      pclath 000A                      ltemp0 007E  
                    ltemp1 0082                      ltemp2 0086                      ltemp3 0080  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F             __CFG_MCLRE$OFF 0000            __initialization 0011  
             __end_of_main 0095                     ??_main 004D                     _ANSELH 011F  
                   _OSCCON 008F                     _TMR1GE 0086                     _TMR1CS 0081  
                   _SPBRGH 009A                     _TMR1ON 0080      __end_of_motor2_1Array 0126  
    __end_of_motor2_2Array 0135                     _motor1 0074                     _motor2 0048  
                   _motor3 0049                     saved_w 007E    __end_of__initialization 0023  
__size_of_global_interrupt 006D             __pcstackCOMMON 0076               __pidataBANK0 014D  
               __pbssBANK0 0038              _init_received 0047                 __pnvCOMMON 007C  
               __pmaintext 0025                 __pintentry 0004                 _direction1 003C  
               _direction2 003E                    _T1OSCEN 0083                 _direction3 0040  
                  _OSCTUNE 0090                 __stringtab 0102                    __ptext1 0095  
                _T1CONbits 0010                    clrloop0 0175       end_of_initialization 0023  
        __end_of_posArray1 013D          __end_of_posArray2 0145          __end_of_posArray3 014D  
         _global_interrupt 0095                 _motor1stop 0033                 _motor2stop 0035  
               _motor3stop 0037                 _motor_data 002F        start_initialization 0011  
             _counter_uart 0072                 init_fetch0 0165               _incremental1 0073  
             _incremental3 0046                __pdataBANK0 0020                __pbssCOMMON 0070  
                ___latbits 0000              __pcstackBANK0 004D              _motor2_1Array 0117  
            _motor2_2Array 0126                  __pstrings 0102   __end_of_global_interrupt 0102  
        interrupt_function 0004                  clear_ram0 0174                  _posArray1 0135  
                _posArray2 013D                  _posArray3 0145                  _uart_data 0020  
                _tmp_data2 004C                __stringbase 0107        __end_of_motor1Array 0117  
       __end_of__stringtab 0108                   _counter1 0070                   _counter2 0038  
                 _counter3 003A              __size_of_main 0070                   _tmp_data 0075  
                 init_ram0 0169                   intlevel1 0000                _motor1Array 0108  
              _motor1_data 0032                _motor2_data 0034                _motor3_data 0036  
                stringcode 0102                 _OPTION_REG 0081                   stringdir 0102  
        ?_global_interrupt 0076                   stringtab 0102         ??_global_interrupt 0076  
        __CFG_FOSC$INTRCIO 0000  
