

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun Jun 07 18:59:04 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F687
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     	;# 
    19  0001                     	;# 
    20  0002                     	;# 
    21  0003                     	;# 
    22  0004                     	;# 
    23  0005                     	;# 
    24  0006                     	;# 
    25  0007                     	;# 
    26  000A                     	;# 
    27  000B                     	;# 
    28  000C                     	;# 
    29  000D                     	;# 
    30  000E                     	;# 
    31  000E                     	;# 
    32  000F                     	;# 
    33  0010                     	;# 
    34  0013                     	;# 
    35  0014                     	;# 
    36  0018                     	;# 
    37  0019                     	;# 
    38  001A                     	;# 
    39  001E                     	;# 
    40  001F                     	;# 
    41  0081                     	;# 
    42  0085                     	;# 
    43  0086                     	;# 
    44  0087                     	;# 
    45  008C                     	;# 
    46  008D                     	;# 
    47  008E                     	;# 
    48  008F                     	;# 
    49  0090                     	;# 
    50  0093                     	;# 
    51  0093                     	;# 
    52  0093                     	;# 
    53  0094                     	;# 
    54  0095                     	;# 
    55  0095                     	;# 
    56  0096                     	;# 
    57  0096                     	;# 
    58  0097                     	;# 
    59  0098                     	;# 
    60  0099                     	;# 
    61  009A                     	;# 
    62  009B                     	;# 
    63  009E                     	;# 
    64  009F                     	;# 
    65  010C                     	;# 
    66  010C                     	;# 
    67  010D                     	;# 
    68  0115                     	;# 
    69  0116                     	;# 
    70  0118                     	;# 
    71  0119                     	;# 
    72  011A                     	;# 
    73  011B                     	;# 
    74  011E                     	;# 
    75  011F                     	;# 
    76  018C                     	;# 
    77  018D                     	;# 
    78  019E                     	;# 
    79                           
    80                           	psect	idataBANK0
    81  025A                     __pidataBANK0:	
    82                           
    83                           ;initializer for _uart_data
    84  025A  344B               	retlw	75
    85  025B  344B               	retlw	75
    86  025C  344B               	retlw	75
    87  025D  344B               	retlw	75
    88  025E  344B               	retlw	75
    89  025F  344B               	retlw	75
    90  0260  344B               	retlw	75
    91  0261  344B               	retlw	75
    92  0262  344B               	retlw	75
    93  0263  344B               	retlw	75
    94  0264  344B               	retlw	75
    95  0265  344B               	retlw	75
    96  0266  344B               	retlw	75
    97  0267  344B               	retlw	75
    98  0268  344B               	retlw	75
    99                           
   100                           	psect	strings
   101  0200                     __pstrings:	
   102  0200                     stringtab:	
   103  0200                     __stringtab:	
   104  0200                     stringcode:	
   105                           ;	String table - string pointers are 1 byte each
   106                           
   107  0200                     stringdir:	
   108  0200  3002               	movlw	high stringdir
   109  0201  008A               	movwf	10
   110  0202  0804               	movf	4,w
   111  0203  0A84               	incf	4,f
   112  0204  0782               	addwf	2,f
   113  0205                     __stringbase:	
   114  0205  3400               	retlw	0
   115  0206                     __end_of__stringtab:	
   116  0206                     _motor1Array:	
   117  0206  340F               	retlw	15
   118  0207  3487               	retlw	135
   119  0208  3405               	retlw	5
   120  0209  3443               	retlw	67
   121  020A  3469               	retlw	105
   122  020B  3482               	retlw	130
   123  020C  3494               	retlw	148
   124  020D  34A1               	retlw	161
   125  020E  34AC               	retlw	172
   126  020F  34B4               	retlw	180
   127  0210  34BB               	retlw	187
   128  0211  34C0               	retlw	192
   129  0212  34C5               	retlw	197
   130  0213  34C9               	retlw	201
   131  0214  34CD               	retlw	205
   132  0215                     __end_of_motor1Array:	
   133  0215                     _motor2_1Array:	
   134  0215  34A2               	retlw	162
   135  0216  34D1               	retlw	209
   136  0217  34E0               	retlw	224
   137  0218  34E8               	retlw	232
   138  0219  34ED               	retlw	237
   139  021A  34F0               	retlw	240
   140  021B  34F2               	retlw	242
   141  021C  34F4               	retlw	244
   142  021D  34F5               	retlw	245
   143  021E  34F6               	retlw	246
   144  021F  34F7               	retlw	247
   145  0220  34F8               	retlw	248
   146  0221  34F8               	retlw	248
   147  0222  34F9               	retlw	249
   148  0223  34F9               	retlw	249
   149  0224                     __end_of_motor2_1Array:	
   150  0224                     _motor2_2Array:	
   151  0224  343F               	retlw	63
   152  0225  341F               	retlw	31
   153  0226  34BF               	retlw	191
   154  0227  348F               	retlw	143
   155  0228  343F               	retlw	63
   156  0229  345F               	retlw	95
   157  022A  349A               	retlw	154
   158  022B  3447               	retlw	71
   159  022C  3494               	retlw	148
   160  022D  349F               	retlw	159
   161  022E  3479               	retlw	121
   162  022F  342F               	retlw	47
   163  0230  34C9               	retlw	201
   164  0231  344D               	retlw	77
   165  0232  34BF               	retlw	191
   166  0233                     __end_of_motor2_2Array:	
   167  0233                     _motor3Array:	
   168  0233  34F0               	retlw	240
   169  0234  3478               	retlw	120
   170  0235  34FA               	retlw	250
   171  0236  34BB               	retlw	187
   172  0237  3496               	retlw	150
   173  0238  347D               	retlw	125
   174  0239  346B               	retlw	107
   175  023A  345D               	retlw	93
   176  023B  3453               	retlw	83
   177  023C  344B               	retlw	75
   178  023D  3444               	retlw	68
   179  023E  343E               	retlw	62
   180  023F  343A               	retlw	58
   181  0240  3418               	retlw	24
   182  0241  3432               	retlw	50
   183  0242                     __end_of_motor3Array:	
   184  0242                     _posArray1:	
   185  0242  3411               	retlw	17
   186  0243  3401               	retlw	1
   187  0244  3403               	retlw	3
   188  0245  3402               	retlw	2
   189  0246  3406               	retlw	6
   190  0247  3404               	retlw	4
   191  0248  3414               	retlw	20
   192  0249  3410               	retlw	16
   193  024A                     __end_of_posArray1:	
   194  024A                     _posArray2:	
   195  024A  3409               	retlw	9
   196  024B  3401               	retlw	1
   197  024C  3403               	retlw	3
   198  024D  3402               	retlw	2
   199  024E  3406               	retlw	6
   200  024F  3404               	retlw	4
   201  0250  340C               	retlw	12
   202  0251  3408               	retlw	8
   203  0252                     __end_of_posArray2:	
   204  0252                     _posArray3:	
   205  0252  3490               	retlw	144
   206  0253  3410               	retlw	16
   207  0254  3430               	retlw	48
   208  0255  3420               	retlw	32
   209  0256  3460               	retlw	96
   210  0257  3440               	retlw	64
   211  0258  34C0               	retlw	192
   212  0259  3480               	retlw	128
   213  025A                     __end_of_posArray3:	
   214                           
   215                           	psect	nvCOMMON
   216  007C                     __pnvCOMMON:	
   217  007C                     _tmp1:	
   218  007C                     	ds	1
   219  0005                     _PORTA	set	5
   220  0006                     _PORTB	set	6
   221  0007                     _PORTC	set	7
   222  001A                     _RCREG	set	26
   223  0010                     _T1CONbits	set	16
   224  0001                     _TMR0	set	1
   225  000F                     _TMR1H	set	15
   226  000E                     _TMR1L	set	14
   227  00C4                     _CREN	set	196
   228  00C2                     _FERR	set	194
   229  005F                     _GIE	set	95
   230  00C1                     _OERR	set	193
   231  005E                     _PEIE	set	94
   232  0065                     _RCIF	set	101
   233  00C7                     _SPEN	set	199
   234  005D                     _T0IE	set	93
   235  005A                     _T0IF	set	90
   236  0083                     _T1OSCEN	set	131
   237  0081                     _TMR1CS	set	129
   238  0086                     _TMR1GE	set	134
   239  0060                     _TMR1IF	set	96
   240  0080                     _TMR1ON	set	128
   241  0081                     _OPTION_REG	set	129
   242  008F                     _OSCCON	set	143
   243  0090                     _OSCTUNE	set	144
   244  0099                     _SPBRG	set	153
   245  009A                     _SPBRGH	set	154
   246  0085                     _TRISA	set	133
   247  0086                     _TRISB	set	134
   248  0087                     _TRISC	set	135
   249  04DB                     _BRG16	set	1243
   250  04C2                     _BRGH	set	1218
   251  0465                     _RCIE	set	1125
   252  04C4                     _SYNC	set	1220
   253  0460                     _TMR1IE	set	1120
   254  011E                     _ANSEL	set	286
   255  011F                     _ANSELH	set	287
   256                           
   257                           ; #config settings
   258  0000                     
   259                           	psect	cinit
   260  0011                     start_initialization:	
   261  0011                     __initialization:	
   262                           
   263                           ; Clear objects allocated to COMMON
   264  0011  3070               	movlw	low __pbssCOMMON
   265  0012  0084               	movwf	4
   266  0013  3076               	movlw	low (__pbssCOMMON+6)
   267  0014  2269               	fcall	clear_ram0
   268                           
   269                           ; Clear objects allocated to BANK0
   270  0015  1383               	bcf	3,7	;select IRP bank0
   271  0016  3020               	movlw	low __pbssBANK0
   272  0017  0084               	movwf	4
   273  0018  3038               	movlw	low (__pbssBANK0+24)
   274  0019  2269               	fcall	clear_ram0
   275                           
   276                           ; Initialize objects allocated to BANK0
   277  001A  225A               	fcall	__pidataBANK0	;fetch initializer
   278  001B  00B8               	movwf	__pdataBANK0& (0+127)
   279  001C  225B               	fcall	__pidataBANK0+1	;fetch initializer
   280  001D  00B9               	movwf	(__pdataBANK0+1)& (0+127)
   281  001E  225C               	fcall	__pidataBANK0+2	;fetch initializer
   282  001F  00BA               	movwf	(__pdataBANK0+2)& (0+127)
   283  0020  225D               	fcall	__pidataBANK0+3	;fetch initializer
   284  0021  00BB               	movwf	(__pdataBANK0+3)& (0+127)
   285  0022  225E               	fcall	__pidataBANK0+4	;fetch initializer
   286  0023  00BC               	movwf	(__pdataBANK0+4)& (0+127)
   287  0024  225F               	fcall	__pidataBANK0+5	;fetch initializer
   288  0025  00BD               	movwf	(__pdataBANK0+5)& (0+127)
   289  0026  2260               	fcall	__pidataBANK0+6	;fetch initializer
   290  0027  00BE               	movwf	(__pdataBANK0+6)& (0+127)
   291  0028  2261               	fcall	__pidataBANK0+7	;fetch initializer
   292  0029  00BF               	movwf	(__pdataBANK0+7)& (0+127)
   293  002A  2262               	fcall	__pidataBANK0+8	;fetch initializer
   294  002B  00C0               	movwf	(__pdataBANK0+8)& (0+127)
   295  002C  2263               	fcall	__pidataBANK0+9	;fetch initializer
   296  002D  00C1               	movwf	(__pdataBANK0+9)& (0+127)
   297  002E  2264               	fcall	__pidataBANK0+10	;fetch initializer
   298  002F  00C2               	movwf	(__pdataBANK0+10)& (0+127)
   299  0030  2265               	fcall	__pidataBANK0+11	;fetch initializer
   300  0031  00C3               	movwf	(__pdataBANK0+11)& (0+127)
   301  0032  2266               	fcall	__pidataBANK0+12	;fetch initializer
   302  0033  00C4               	movwf	(__pdataBANK0+12)& (0+127)
   303  0034  2267               	fcall	__pidataBANK0+13	;fetch initializer
   304  0035  00C5               	movwf	(__pdataBANK0+13)& (0+127)
   305  0036  2268               	fcall	__pidataBANK0+14	;fetch initializer
   306  0037  00C6               	movwf	(__pdataBANK0+14)& (0+127)
   307  0038                     end_of_initialization:	
   308                           ;End of C runtime variable initialization code
   309                           
   310  0038                     __end_of__initialization:	
   311  0038  0183               	clrf	3
   312  0039  283A               	ljmp	_main	;jump to C main() function
   313                           
   314                           	psect	bssCOMMON
   315  0070                     __pbssCOMMON:	
   316  0070                     _counter_uart:	
   317  0070                     	ds	1
   318  0071                     _motor1:	
   319  0071                     	ds	1
   320  0072                     _motor2:	
   321  0072                     	ds	1
   322  0073                     _tmp2:	
   323  0073                     	ds	1
   324  0074                     _tmp3:	
   325  0074                     	ds	1
   326  0075                     _tmp_data:	
   327  0075                     	ds	1
   328                           
   329                           	psect	bssBANK0
   330  0020                     __pbssBANK0:	
   331  0020                     _counter1:	
   332  0020                     	ds	2
   333  0022                     _counter2:	
   334  0022                     	ds	2
   335  0024                     _counter3:	
   336  0024                     	ds	2
   337  0026                     _direction1:	
   338  0026                     	ds	2
   339  0028                     _direction2:	
   340  0028                     	ds	2
   341  002A                     _direction3:	
   342  002A                     	ds	2
   343  002C                     _loop1:	
   344  002C                     	ds	2
   345  002E                     _loop3:	
   346  002E                     	ds	2
   347  0030                     _incremental1:	
   348  0030                     	ds	1
   349  0031                     _incremental3:	
   350  0031                     	ds	1
   351  0032                     _init_received:	
   352  0032                     	ds	1
   353  0033                     _motor1run:	
   354  0033                     	ds	1
   355  0034                     _motor2run:	
   356  0034                     	ds	1
   357  0035                     _motor3:	
   358  0035                     	ds	1
   359  0036                     _motor3run:	
   360  0036                     	ds	1
   361  0037                     _tmp_data2:	
   362  0037                     	ds	1
   363                           
   364                           	psect	dataBANK0
   365  0038                     __pdataBANK0:	
   366  0038                     _uart_data:	
   367  0038                     	ds	15
   368                           
   369                           	psect	clrtext
   370  0269                     clear_ram0:	
   371                           ;	Called with FSR containing the base address, and
   372                           ;	W with the last address+1
   373                           
   374  0269  0064               	clrwdt	;clear the watchdog before getting into this loop
   375  026A                     clrloop0:	
   376  026A  0180               	clrf	0	;clear RAM location pointed to by FSR
   377  026B  0A84               	incf	4,f	;increment pointer
   378  026C  0604               	xorwf	4,w	;XOR with final address
   379  026D  1903               	btfsc	3,2	;have we reached the end yet?
   380  026E  3400               	retlw	0	;all done for this memory range, return
   381  026F  0604               	xorwf	4,w	;XOR again to restore value
   382  0270  2A6A               	goto	clrloop0	;do the next byte
   383                           
   384                           	psect	cstackCOMMON
   385  0076                     __pcstackCOMMON:	
   386  0076                     ?_global_interrupt:	
   387  0076                     ??_global_interrupt:	
   388                           ; 0 bytes @ 0x0
   389                           
   390  0076                     ?_main:	
   391                           ; 0 bytes @ 0x0
   392                           
   393                           
   394                           ; 2 bytes @ 0x0
   395  0076                     	ds	6
   396                           
   397                           	psect	cstackBANK0
   398  0047                     __pcstackBANK0:	
   399  0047                     ??_main:	
   400                           
   401                           ; 0 bytes @ 0x0
   402  0047                     	ds	1
   403                           
   404                           	psect	maintext
   405  003A                     __pmaintext:	
   406 ;;
   407 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   408 ;;
   409 ;; *************** function _main *****************
   410 ;; Defined at:
   411 ;;		line 173 in file "main.c"
   412 ;; Parameters:    Size  Location     Type
   413 ;;		None
   414 ;; Auto vars:     Size  Location     Type
   415 ;;		None
   416 ;; Return value:  Size  Location     Type
   417 ;;                  2  158[COMMON] int 
   418 ;; Registers used:
   419 ;;		wreg, status,2, status,0
   420 ;; Tracked objects:
   421 ;;		On entry : 17F/0
   422 ;;		On exit  : 0/0
   423 ;;		Unchanged: 0/0
   424 ;; Data sizes:     COMMON   BANK0   BANK1
   425 ;;      Params:         0       0       0
   426 ;;      Locals:         0       0       0
   427 ;;      Temps:          0       1       0
   428 ;;      Totals:         0       1       0
   429 ;;Total ram usage:        1 bytes
   430 ;; Hardware stack levels required when called:    2
   431 ;; This function calls:
   432 ;;		Nothing
   433 ;; This function is called by:
   434 ;;		Startup code after reset
   435 ;; This function uses a non-reentrant model
   436 ;;
   437                           
   438                           
   439                           ;psect for function _main
   440  003A                     _main:	
   441                           
   442                           ;main.c: 175: OSCCON = 0x00;
   443                           
   444                           ;incstack = 0
   445                           ; Regs used in _main: [wreg+status,2+status,0]
   446  003A  1683               	bsf	3,5	;RP0=1, select bank1
   447  003B  1303               	bcf	3,6	;RP1=0, select bank1
   448  003C  018F               	clrf	15	;volatile
   449                           
   450                           ;main.c: 176: OSCCON |= 0b01110001;
   451  003D  3071               	movlw	113
   452  003E  1283               	bcf	3,5	;RP0=0, select bank0
   453  003F  1303               	bcf	3,6	;RP1=0, select bank0
   454  0040  00C7               	movwf	??_main
   455  0041  0847               	movf	??_main,w
   456  0042  1683               	bsf	3,5	;RP0=1, select bank1
   457  0043  1303               	bcf	3,6	;RP1=0, select bank1
   458  0044  048F               	iorwf	15,f	;volatile
   459                           
   460                           ;main.c: 177: OSCTUNE = 0x00;
   461  0045  0190               	clrf	16	;volatile
   462                           
   463                           ;main.c: 181: OPTION_REG &= 0b11010000;
   464  0046  30D0               	movlw	208
   465  0047  1283               	bcf	3,5	;RP0=0, select bank0
   466  0048  1303               	bcf	3,6	;RP1=0, select bank0
   467  0049  00C7               	movwf	??_main
   468  004A  0847               	movf	??_main,w
   469  004B  1683               	bsf	3,5	;RP0=1, select bank1
   470  004C  1303               	bcf	3,6	;RP1=0, select bank1
   471  004D  0581               	andwf	1,f	;volatile
   472                           
   473                           ;main.c: 182: OPTION_REG |= 0b00000100;
   474  004E  1501               	bsf	1,2	;volatile
   475                           
   476                           ;main.c: 183: TMR0 = 0x00;
   477  004F  1283               	bcf	3,5	;RP0=0, select bank0
   478  0050  1303               	bcf	3,6	;RP1=0, select bank0
   479  0051  0181               	clrf	1	;volatile
   480                           
   481                           ;main.c: 184: T0IE = 1;
   482  0052  168B               	bsf	11,5	;volatile
   483                           
   484                           ;main.c: 189: TMR1GE = 0;
   485  0053  1310               	bcf	16,6	;volatile
   486                           
   487                           ;main.c: 190: T1CONbits.T1CKPS0 = 0;
   488  0054  1210               	bcf	16,4	;volatile
   489                           
   490                           ;main.c: 191: T1CONbits.T1CKPS1 = 0;
   491  0055  1290               	bcf	16,5	;volatile
   492                           
   493                           ;main.c: 192: T1OSCEN = 0;
   494  0056  1190               	bcf	16,3	;volatile
   495                           
   496                           ;main.c: 193: TMR1CS = 0;
   497  0057  1090               	bcf	16,1	;volatile
   498                           
   499                           ;main.c: 194: TMR1ON = 1;
   500  0058  1410               	bsf	16,0	;volatile
   501                           
   502                           ;main.c: 195: TMR1H = 0x00;
   503  0059  018F               	clrf	15	;volatile
   504                           
   505                           ;main.c: 196: TMR1H = 0x00;
   506  005A  018F               	clrf	15	;volatile
   507                           
   508                           ;main.c: 197: TMR1IE = 1;
   509  005B  1683               	bsf	3,5	;RP0=1, select bank1
   510  005C  1303               	bcf	3,6	;RP1=0, select bank1
   511  005D  140C               	bsf	12,0	;volatile
   512                           
   513                           ;main.c: 201: BRG16 = 0;
   514  005E  119B               	bcf	27,3	;volatile
   515                           
   516                           ;main.c: 202: BRGH = 0;
   517  005F  1118               	bcf	24,2	;volatile
   518                           
   519                           ;main.c: 203: SPBRGH = 0;
   520  0060  019A               	clrf	26	;volatile
   521                           
   522                           ;main.c: 204: SPBRG = 0x0C;
   523  0061  300C               	movlw	12
   524  0062  0099               	movwf	25	;volatile
   525                           
   526                           ;main.c: 205: SYNC = 0;
   527  0063  1218               	bcf	24,4	;volatile
   528                           
   529                           ;main.c: 206: SPEN = 1;
   530  0064  1283               	bcf	3,5	;RP0=0, select bank0
   531  0065  1303               	bcf	3,6	;RP1=0, select bank0
   532  0066  1798               	bsf	24,7	;volatile
   533                           
   534                           ;main.c: 207: RCIE = 1;
   535  0067  1683               	bsf	3,5	;RP0=1, select bank1
   536  0068  1303               	bcf	3,6	;RP1=0, select bank1
   537  0069  168C               	bsf	12,5	;volatile
   538                           
   539                           ;main.c: 208: CREN = 1;
   540  006A  1283               	bcf	3,5	;RP0=0, select bank0
   541  006B  1303               	bcf	3,6	;RP1=0, select bank0
   542  006C  1618               	bsf	24,4	;volatile
   543                           
   544                           ;main.c: 227: TRISA = 0x00;
   545  006D  1683               	bsf	3,5	;RP0=1, select bank1
   546  006E  1303               	bcf	3,6	;RP1=0, select bank1
   547  006F  0185               	clrf	5	;volatile
   548                           
   549                           ;main.c: 228: TRISB = 0b00100000;
   550  0070  3020               	movlw	32
   551  0071  0086               	movwf	6	;volatile
   552                           
   553                           ;main.c: 229: TRISC = 0x00;
   554  0072  0187               	clrf	7	;volatile
   555                           
   556                           ;main.c: 230: ANSEL = 0x00;
   557  0073  1283               	bcf	3,5	;RP0=0, select bank2
   558  0074  1703               	bsf	3,6	;RP1=1, select bank2
   559  0075  019E               	clrf	30	;volatile
   560                           
   561                           ;main.c: 231: ANSELH = 0x00;
   562  0076  019F               	clrf	31	;volatile
   563                           
   564                           ;main.c: 234: PORTA = 0x00;
   565  0077  1283               	bcf	3,5	;RP0=0, select bank0
   566  0078  1303               	bcf	3,6	;RP1=0, select bank0
   567  0079  0185               	clrf	5	;volatile
   568                           
   569                           ;main.c: 235: PORTB = 0x00;
   570  007A  0186               	clrf	6	;volatile
   571                           
   572                           ;main.c: 236: PORTC = 0x00;
   573  007B  0187               	clrf	7	;volatile
   574                           
   575                           ;main.c: 237: PEIE = 1;
   576  007C  170B               	bsf	11,6	;volatile
   577                           
   578                           ;main.c: 238: GIE = 1;
   579  007D  178B               	bsf	11,7	;volatile
   580  007E                     l1133:	
   581                           ;main.c: 240: while(1){
   582                           
   583                           
   584                           ;main.c: 243: tmp1 = uart_data[14];
   585  007E  0846               	movf	_uart_data+14,w
   586  007F  00C7               	movwf	??_main
   587  0080  0847               	movf	??_main,w
   588  0081  00FC               	movwf	_tmp1
   589                           
   590                           ;main.c: 245: if(tmp1 == 75)
   591  0082  087C               	movf	_tmp1,w
   592  0083  3A4B               	xorlw	75
   593  0084  1D03               	skipz
   594  0085  2888               	goto	l1139
   595                           
   596                           ;main.c: 246: motor1run = 0x00;
   597  0086  01B3               	clrf	_motor1run
   598  0087  288C               	goto	l161
   599  0088                     l1139:	
   600                           
   601                           ;main.c: 247: else
   602                           ;main.c: 248: motor1run = 0xFF;
   603  0088  30FF               	movlw	255
   604  0089  00C7               	movwf	??_main
   605  008A  0847               	movf	??_main,w
   606  008B  00B3               	movwf	_motor1run
   607  008C                     l161:	
   608                           
   609                           ;main.c: 250: if(tmp1 >=60){
   610  008C  303C               	movlw	60
   611  008D  027C               	subwf	_tmp1,w
   612  008E  1C03               	skipc
   613  008F  2899               	goto	l1145
   614                           
   615                           ;main.c: 251: tmp1 = tmp1 - 15;
   616  0090  087C               	movf	_tmp1,w
   617  0091  3EF1               	addlw	241
   618  0092  00C7               	movwf	??_main
   619  0093  0847               	movf	??_main,w
   620  0094  00FC               	movwf	_tmp1
   621                           
   622                           ;main.c: 252: direction1 = -1;
   623  0095  30FF               	movlw	255
   624  0096  00A6               	movwf	_direction1
   625  0097  30FF               	movlw	255
   626  0098  289C               	goto	L1
   627  0099                     l1145:	
   628                           ;main.c: 253: }
   629                           
   630                           
   631                           ;main.c: 254: else
   632                           ;main.c: 255: direction1 = 1;
   633  0099  3001               	movlw	1
   634  009A  00A6               	movwf	_direction1
   635  009B  3000               	movlw	0
   636  009C                     L1:	
   637  009C  00A7               	movwf	_direction1+1
   638                           
   639                           ;main.c: 260: tmp1 = tmp1 - 45;
   640  009D  087C               	movf	_tmp1,w
   641  009E  3ED3               	addlw	211
   642  009F  00C7               	movwf	??_main
   643  00A0  0847               	movf	??_main,w
   644  00A1  00FC               	movwf	_tmp1
   645                           
   646                           ;main.c: 261: if(tmp1 == 0)
   647  00A2  08FC               	movf	_tmp1,f
   648  00A3  1D03               	skipz
   649  00A4  28AA               	goto	l1151
   650                           
   651                           ;main.c: 262: incremental1 = 2;
   652  00A5  3002               	movlw	2
   653  00A6  00C7               	movwf	??_main
   654  00A7  0847               	movf	??_main,w
   655  00A8  00B0               	movwf	_incremental1
   656  00A9  28B2               	goto	l1157
   657  00AA                     l1151:	
   658                           
   659                           ;main.c: 263: else if(tmp1 == 1)
   660  00AA  087C               	movf	_tmp1,w
   661  00AB  3A01               	xorlw	1
   662  00AC  1D03               	skipz
   663  00AD  28B1               	goto	l1155
   664                           
   665                           ;main.c: 264: incremental1 = 1;
   666  00AE  01B0               	clrf	_incremental1
   667  00AF  0AB0               	incf	_incremental1,f
   668  00B0  28B2               	goto	l1157
   669  00B1                     l1155:	
   670                           
   671                           ;main.c: 265: else
   672                           ;main.c: 266: incremental1 = 0;
   673  00B1  01B0               	clrf	_incremental1
   674  00B2                     l1157:	
   675                           
   676                           ;main.c: 269: motor1 = tmp1;
   677  00B2  087C               	movf	_tmp1,w
   678  00B3  00C7               	movwf	??_main
   679  00B4  0847               	movf	??_main,w
   680  00B5  00F1               	movwf	_motor1
   681                           
   682                           ;main.c: 273: tmp2 = uart_data[13];
   683  00B6  0845               	movf	_uart_data+13,w
   684  00B7  00C7               	movwf	??_main
   685  00B8  0847               	movf	??_main,w
   686  00B9  00F3               	movwf	_tmp2
   687                           
   688                           ;main.c: 274: if(tmp2 == 75)
   689  00BA  0873               	movf	_tmp2,w
   690  00BB  3A4B               	xorlw	75
   691  00BC  1D03               	skipz
   692  00BD  28C0               	goto	l1165
   693                           
   694                           ;main.c: 275: motor2run = 0x00;
   695  00BE  01B4               	clrf	_motor2run
   696  00BF  28C4               	goto	l169
   697  00C0                     l1165:	
   698                           
   699                           ;main.c: 276: else
   700                           ;main.c: 277: motor2run = 0xFF;
   701  00C0  30FF               	movlw	255
   702  00C1  00C7               	movwf	??_main
   703  00C2  0847               	movf	??_main,w
   704  00C3  00B4               	movwf	_motor2run
   705  00C4                     l169:	
   706                           
   707                           ;main.c: 279: if(tmp2 >=60){
   708  00C4  303C               	movlw	60
   709  00C5  0273               	subwf	_tmp2,w
   710  00C6  1C03               	skipc
   711  00C7  28D1               	goto	l1171
   712                           
   713                           ;main.c: 280: tmp2 = tmp2 - 15;
   714  00C8  0873               	movf	_tmp2,w
   715  00C9  3EF1               	addlw	241
   716  00CA  00C7               	movwf	??_main
   717  00CB  0847               	movf	??_main,w
   718  00CC  00F3               	movwf	_tmp2
   719                           
   720                           ;main.c: 281: direction2 = -1;
   721  00CD  30FF               	movlw	255
   722  00CE  00A8               	movwf	_direction2
   723  00CF  30FF               	movlw	255
   724  00D0  28D4               	goto	L2
   725  00D1                     l1171:	
   726                           ;main.c: 282: }
   727                           
   728                           
   729                           ;main.c: 283: else
   730                           ;main.c: 284: direction2 = 1;
   731  00D1  3001               	movlw	1
   732  00D2  00A8               	movwf	_direction2
   733  00D3  3000               	movlw	0
   734  00D4                     L2:	
   735  00D4  00A9               	movwf	_direction2+1
   736                           
   737                           ;main.c: 286: tmp2 = tmp2 - 45;
   738  00D5  0873               	movf	_tmp2,w
   739  00D6  3ED3               	addlw	211
   740  00D7  00C7               	movwf	??_main
   741  00D8  0847               	movf	??_main,w
   742  00D9  00F3               	movwf	_tmp2
   743                           
   744                           ;main.c: 287: motor2 = tmp2;
   745  00DA  0873               	movf	_tmp2,w
   746  00DB  00C7               	movwf	??_main
   747  00DC  0847               	movf	??_main,w
   748  00DD  00F2               	movwf	_motor2
   749                           
   750                           ;main.c: 291: tmp3 = uart_data[12];
   751  00DE  0844               	movf	_uart_data+12,w
   752  00DF  00C7               	movwf	??_main
   753  00E0  0847               	movf	??_main,w
   754  00E1  00F4               	movwf	_tmp3
   755                           
   756                           ;main.c: 293: if(tmp3 == 75)
   757  00E2  0874               	movf	_tmp3,w
   758  00E3  3A4B               	xorlw	75
   759  00E4  1D03               	skipz
   760  00E5  28E8               	goto	l1183
   761                           
   762                           ;main.c: 294: motor3run = 0x00;
   763  00E6  01B6               	clrf	_motor3run
   764  00E7  28EC               	goto	l173
   765  00E8                     l1183:	
   766                           
   767                           ;main.c: 295: else
   768                           ;main.c: 296: motor3run = 0xFF;
   769  00E8  30FF               	movlw	255
   770  00E9  00C7               	movwf	??_main
   771  00EA  0847               	movf	??_main,w
   772  00EB  00B6               	movwf	_motor3run
   773  00EC                     l173:	
   774                           
   775                           ;main.c: 298: if(tmp3 >=60){
   776  00EC  303C               	movlw	60
   777  00ED  0274               	subwf	_tmp3,w
   778  00EE  1C03               	skipc
   779  00EF  28F9               	goto	l1189
   780                           
   781                           ;main.c: 299: tmp3 = tmp3 - 15;
   782  00F0  0874               	movf	_tmp3,w
   783  00F1  3EF1               	addlw	241
   784  00F2  00C7               	movwf	??_main
   785  00F3  0847               	movf	??_main,w
   786  00F4  00F4               	movwf	_tmp3
   787                           
   788                           ;main.c: 300: direction3 = -1;
   789  00F5  30FF               	movlw	255
   790  00F6  00AA               	movwf	_direction3
   791  00F7  30FF               	movlw	255
   792  00F8  28FC               	goto	L3
   793  00F9                     l1189:	
   794                           ;main.c: 301: }
   795                           
   796                           
   797                           ;main.c: 302: else
   798                           ;main.c: 303: direction3 = 1;
   799  00F9  3001               	movlw	1
   800  00FA  00AA               	movwf	_direction3
   801  00FB  3000               	movlw	0
   802  00FC                     L3:	
   803  00FC  00AB               	movwf	_direction3+1
   804                           
   805                           ;main.c: 308: tmp3 = tmp3 - 45;
   806  00FD  0874               	movf	_tmp3,w
   807  00FE  3ED3               	addlw	211
   808  00FF  00C7               	movwf	??_main
   809  0100  0847               	movf	??_main,w
   810  0101  00F4               	movwf	_tmp3
   811                           
   812                           ;main.c: 309: if(tmp3 == 0)
   813  0102  08F4               	movf	_tmp3,f
   814  0103  1D03               	skipz
   815  0104  290A               	goto	l1195
   816                           
   817                           ;main.c: 310: incremental3 = 2;
   818  0105  3002               	movlw	2
   819  0106  00C7               	movwf	??_main
   820  0107  0847               	movf	??_main,w
   821  0108  00B1               	movwf	_incremental3
   822  0109  2912               	goto	l1201
   823  010A                     l1195:	
   824                           
   825                           ;main.c: 311: else if(tmp3 == 1)
   826  010A  0874               	movf	_tmp3,w
   827  010B  3A01               	xorlw	1
   828  010C  1D03               	skipz
   829  010D  2911               	goto	l1199
   830                           
   831                           ;main.c: 312: incremental3 = 1;
   832  010E  01B1               	clrf	_incremental3
   833  010F  0AB1               	incf	_incremental3,f
   834  0110  2912               	goto	l1201
   835  0111                     l1199:	
   836                           
   837                           ;main.c: 313: else
   838                           ;main.c: 314: incremental3 = 0;
   839  0111  01B1               	clrf	_incremental3
   840  0112                     l1201:	
   841                           
   842                           ;main.c: 317: motor3 = tmp3;
   843  0112  0874               	movf	_tmp3,w
   844  0113  00C7               	movwf	??_main
   845  0114  0847               	movf	??_main,w
   846  0115  00B5               	movwf	_motor3
   847  0116  287E               	goto	l1133
   848  0117                     __end_of_main:	
   849                           
   850                           	psect	text1
   851  0117                     __ptext1:	
   852 ;; *************** function _global_interrupt *****************
   853 ;; Defined at:
   854 ;;		line 52 in file "main.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;		None
   857 ;; Auto vars:     Size  Location     Type
   858 ;;		None
   859 ;; Return value:  Size  Location     Type
   860 ;;		None               void
   861 ;; Registers used:
   862 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1
   868 ;;      Params:         0       0       0
   869 ;;      Locals:         0       0       0
   870 ;;      Temps:          6       0       0
   871 ;;      Totals:         6       0       0
   872 ;;Total ram usage:        6 bytes
   873 ;; Hardware stack levels used:    2
   874 ;; This function calls:
   875 ;;		Nothing
   876 ;; This function is called by:
   877 ;;		Interrupt level 1
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           
   882                           ;psect for function _global_interrupt
   883  0117                     _global_interrupt:	
   884                           
   885                           ;main.c: 54: GIE = 0 ;
   886  0117  138B               	bcf	11,7	;volatile
   887                           
   888                           ;main.c: 55: CREN = 1;
   889  0118  1618               	bsf	24,4	;volatile
   890                           
   891                           ;main.c: 57: if(RCIF){
   892  0119  1E8C               	btfss	12,5	;volatile
   893  011A  293E               	goto	i1l139
   894                           
   895                           ;main.c: 60: if(FERR == 0 && OERR == 0){
   896  011B  1D18               	btfss	24,2	;volatile
   897  011C  1898               	btfsc	24,1	;volatile
   898  011D  2937               	goto	i1l140
   899                           
   900                           ;main.c: 61: tmp_data = RCREG;
   901  011E  081A               	movf	26,w	;volatile
   902  011F  00F6               	movwf	??_global_interrupt
   903  0120  0876               	movf	??_global_interrupt,w
   904  0121  00F5               	movwf	_tmp_data
   905                           
   906                           ;main.c: 63: if(tmp_data == 0x55){
   907  0122  0875               	movf	_tmp_data,w
   908  0123  3A55               	xorlw	85
   909  0124  1903               	btfsc	3,2
   910  0125  293C               	goto	i1l877
   911                           
   912                           ;main.c: 67: }
   913                           ;main.c: 69: uart_data[counter_uart] = tmp_data;
   914                           
   915                           ;main.c: 66: return;
   916                           
   917                           ;main.c: 65: GIE = 1;
   918                           
   919                           ;main.c: 64: counter_uart = 0;
   920  0126  0875               	movf	_tmp_data,w
   921  0127  00F6               	movwf	??_global_interrupt
   922  0128  0870               	movf	_counter_uart,w
   923  0129  3E38               	addlw	_uart_data& (0+255)
   924  012A  0084               	movwf	4
   925  012B  0876               	movf	??_global_interrupt,w
   926  012C  1383               	bcf	3,7	;select IRP bank0
   927  012D  0080               	movwf	0
   928                           
   929                           ;main.c: 70: counter_uart += 1;
   930  012E  3001               	movlw	1
   931  012F  00F6               	movwf	??_global_interrupt
   932  0130  0876               	movf	??_global_interrupt,w
   933  0131  07F0               	addwf	_counter_uart,f
   934                           
   935                           ;main.c: 71: if(counter_uart == 15){
   936  0132  0870               	movf	_counter_uart,w
   937  0133  3A0F               	xorlw	15
   938  0134  1D03               	skipz
   939  0135  29A9               	goto	i1l927
   940  0136  293C               	goto	i1l877
   941  0137                     i1l140:	
   942                           ;main.c: 73: }
   943                           ;main.c: 77: }
   944                           
   945                           ;main.c: 72: counter_uart = 0;
   946                           
   947                           
   948                           ;main.c: 78: else{
   949                           ;main.c: 79: CREN = 0;
   950  0137  1218               	bcf	24,4	;volatile
   951                           
   952                           ;main.c: 80: tmp_data = RCREG;
   953  0138  081A               	movf	26,w	;volatile
   954  0139  00F6               	movwf	??_global_interrupt
   955  013A  0876               	movf	??_global_interrupt,w
   956  013B  00F5               	movwf	_tmp_data
   957  013C                     i1l877:	
   958                           
   959                           ;main.c: 81: counter_uart = 0;
   960  013C  01F0               	clrf	_counter_uart
   961  013D  29A9               	goto	i1l927
   962  013E                     i1l139:	
   963                           ;main.c: 84: return;
   964                           
   965                           ;main.c: 82: }
   966                           ;main.c: 83: GIE = 1;
   967                           
   968                           
   969                           ;main.c: 86: }
   970                           ;main.c: 89: if(T0IF){
   971  013E  1D0B               	btfss	11,2	;volatile
   972  013F  297B               	goto	i1l145
   973                           
   974                           ;main.c: 90: T0IF = 0;
   975  0140  110B               	bcf	11,2	;volatile
   976                           
   977                           ;main.c: 93: if(loop1 == 2){
   978  0141  3002               	movlw	2
   979  0142  062C               	xorwf	_loop1,w
   980  0143  042D               	iorwf	_loop1+1,w
   981  0144  1D03               	skipz
   982  0145  294B               	goto	i1l891
   983                           
   984                           ;main.c: 94: loop1 = 1;
   985  0146  3001               	movlw	1
   986  0147  00AC               	movwf	_loop1
   987  0148  3000               	movlw	0
   988  0149  00AD               	movwf	_loop1+1
   989  014A  2952               	goto	L4
   990  014B                     i1l891:	
   991                           ;main.c: 96: }
   992                           
   993                           ;main.c: 95: TMR0 = 0;
   994                           
   995                           
   996                           ;main.c: 97: else if(loop1 == 1){
   997  014B  3001               	movlw	1
   998  014C  062C               	xorwf	_loop1,w
   999  014D  042D               	iorwf	_loop1+1,w
  1000  014E  1D03               	skipz
  1001  014F  2954               	goto	i1l895
  1002                           
  1003                           ;main.c: 98: loop1 = 0;
  1004  0150  01AC               	clrf	_loop1
  1005  0151  01AD               	clrf	_loop1+1
  1006  0152                     L4:	
  1007                           
  1008                           ;main.c: 99: TMR0 = 0;
  1009  0152  0181               	clrf	1	;volatile
  1010                           
  1011                           ;main.c: 100: }
  1012  0153  29A9               	goto	i1l927
  1013  0154                     i1l895:	
  1014                           
  1015                           ;main.c: 101: else{
  1016                           ;main.c: 102: TMR0 = motor1Array[motor1];
  1017  0154  0871               	movf	_motor1,w
  1018  0155  3E01               	addlw	low (_motor1Array-__stringbase)
  1019  0156  0084               	movwf	4
  1020  0157  2200               	fcall	stringdir
  1021  0158  0081               	movwf	1	;volatile
  1022                           
  1023                           ;main.c: 103: loop1 = incremental1;
  1024  0159  0830               	movf	_incremental1,w
  1025  015A  00F6               	movwf	??_global_interrupt
  1026  015B  01F7               	clrf	??_global_interrupt+1
  1027  015C  0876               	movf	??_global_interrupt,w
  1028  015D  00AC               	movwf	_loop1
  1029  015E  0877               	movf	??_global_interrupt+1,w
  1030  015F  00AD               	movwf	_loop1+1
  1031                           
  1032                           ;main.c: 104: counter1 += direction1;
  1033  0160  0826               	movf	_direction1,w
  1034  0161  07A0               	addwf	_counter1,f
  1035  0162  1803               	skipnc
  1036  0163  0AA1               	incf	_counter1+1,f
  1037  0164  0827               	movf	_direction1+1,w
  1038  0165  07A1               	addwf	_counter1+1,f
  1039                           
  1040                           ;main.c: 105: if(counter1 == 8)
  1041  0166  3008               	movlw	8
  1042  0167  0620               	xorwf	_counter1,w
  1043  0168  0421               	iorwf	_counter1+1,w
  1044  0169  1D03               	skipz
  1045  016A  296E               	goto	i1l150
  1046                           
  1047                           ;main.c: 106: counter1 = 0;
  1048  016B  01A0               	clrf	_counter1
  1049  016C  01A1               	clrf	_counter1+1
  1050  016D  2974               	goto	i1l907
  1051  016E                     i1l150:	
  1052                           
  1053                           ;main.c: 107: else if(counter1 < 0)
  1054  016E  1FA1               	btfss	_counter1+1,7
  1055  016F  2974               	goto	i1l907
  1056                           
  1057                           ;main.c: 108: counter1 = 7;
  1058  0170  3007               	movlw	7
  1059  0171  00A0               	movwf	_counter1
  1060  0172  3000               	movlw	0
  1061  0173  00A1               	movwf	_counter1+1
  1062  0174                     i1l907:	
  1063                           
  1064                           ;main.c: 110: PORTA = posArray1[counter1] & motor1run;
  1065  0174  0820               	movf	_counter1,w
  1066  0175  3E3D               	addlw	low (_posArray1-__stringbase)
  1067  0176  0084               	movwf	4
  1068  0177  2200               	fcall	stringdir
  1069  0178  0533               	andwf	_motor1run,w
  1070  0179  0085               	movwf	5	;volatile
  1071  017A  29A9               	goto	i1l927
  1072  017B                     i1l145:	
  1073                           ;main.c: 115: return;
  1074                           
  1075                           ;main.c: 113: }
  1076                           ;main.c: 114: GIE = 1 ;
  1077                           
  1078                           
  1079                           ;main.c: 117: }
  1080                           ;main.c: 120: if(TMR1IF){
  1081  017B  1C0C               	btfss	12,0	;volatile
  1082  017C  299C               	goto	i1l925
  1083                           
  1084                           ;main.c: 121: TMR1IF = 0;
  1085  017D  100C               	bcf	12,0	;volatile
  1086                           
  1087                           ;main.c: 123: counter2 += direction2;
  1088  017E  0828               	movf	_direction2,w
  1089  017F  07A2               	addwf	_counter2,f
  1090  0180  1803               	skipnc
  1091  0181  0AA3               	incf	_counter2+1,f
  1092  0182  0829               	movf	_direction2+1,w
  1093  0183  07A3               	addwf	_counter2+1,f
  1094                           
  1095                           ;main.c: 125: if(counter2 == 8)
  1096  0184  3008               	movlw	8
  1097  0185  0622               	xorwf	_counter2,w
  1098  0186  0423               	iorwf	_counter2+1,w
  1099  0187  1D03               	skipz
  1100  0188  298C               	goto	i1l154
  1101                           
  1102                           ;main.c: 126: counter2 = 0;
  1103  0189  01A2               	clrf	_counter2
  1104  018A  01A3               	clrf	_counter2+1
  1105  018B  2992               	goto	i1l921
  1106  018C                     i1l154:	
  1107                           
  1108                           ;main.c: 127: else if(counter2 < 0)
  1109  018C  1FA3               	btfss	_counter2+1,7
  1110  018D  2992               	goto	i1l921
  1111                           
  1112                           ;main.c: 128: counter2 = 7;
  1113  018E  3007               	movlw	7
  1114  018F  00A2               	movwf	_counter2
  1115  0190  3000               	movlw	0
  1116  0191  00A3               	movwf	_counter2+1
  1117  0192                     i1l921:	
  1118                           
  1119                           ;main.c: 130: TMR1H = motor2_1Array[motor2];
  1120  0192  0872               	movf	_motor2,w
  1121  0193  3E10               	addlw	low (_motor2_1Array-__stringbase)
  1122  0194  0084               	movwf	4
  1123  0195  2200               	fcall	stringdir
  1124  0196  008F               	movwf	15	;volatile
  1125                           
  1126                           ;main.c: 131: TMR1L = motor2_2Array[motor2];
  1127  0197  0872               	movf	_motor2,w
  1128  0198  3E1F               	addlw	low (_motor2_2Array-__stringbase)
  1129  0199  0084               	movwf	4
  1130  019A  2200               	fcall	stringdir
  1131  019B  008E               	movwf	14	;volatile
  1132  019C                     i1l925:	
  1133                           
  1134                           ;main.c: 134: }
  1135                           ;main.c: 160: PORTC = (posArray2[counter2] & motor2run) | (posArray3[counter3] & motor3r
      +                          un);
  1136  019C  0824               	movf	_counter3,w
  1137  019D  3E4D               	addlw	low (_posArray3-__stringbase)
  1138  019E  0084               	movwf	4
  1139  019F  2200               	fcall	stringdir
  1140  01A0  0536               	andwf	_motor3run,w
  1141  01A1  00F6               	movwf	??_global_interrupt
  1142  01A2  0822               	movf	_counter2,w
  1143  01A3  3E45               	addlw	low (_posArray2-__stringbase)
  1144  01A4  0084               	movwf	4
  1145  01A5  2200               	fcall	stringdir
  1146  01A6  0534               	andwf	_motor2run,w
  1147  01A7  0476               	iorwf	??_global_interrupt,w
  1148  01A8  0087               	movwf	7	;volatile
  1149  01A9                     i1l927:	
  1150                           
  1151                           ;main.c: 163: GIE = 1 ;
  1152  01A9  178B               	bsf	11,7	;volatile
  1153                           
  1154                           ;main.c: 164: return;
  1155  01AA  087B               	movf	??_global_interrupt+5,w
  1156  01AB  00FF               	movwf	127
  1157  01AC  087A               	movf	??_global_interrupt+4,w
  1158  01AD  008A               	movwf	10
  1159  01AE  0879               	movf	??_global_interrupt+3,w
  1160  01AF  0084               	movwf	4
  1161  01B0  0E78               	swapf	(??_global_interrupt+2)^(0+-128),w
  1162  01B1  0083               	movwf	3
  1163  01B2  0EFE               	swapf	126,f
  1164  01B3  0E7E               	swapf	126,w
  1165  01B4  0009               	retfie
  1166  01B5                     __end_of_global_interrupt:	
  1167  007E                     btemp	set	126	;btemp
  1168  007E                     wtemp	set	126
  1169  007E                     wtemp0	set	126
  1170  0080                     wtemp1	set	128
  1171  0082                     wtemp2	set	130
  1172  0084                     wtemp3	set	132
  1173  0086                     wtemp4	set	134
  1174  0088                     wtemp5	set	136
  1175  007F                     wtemp6	set	127
  1176  007E                     ttemp	set	126
  1177  007E                     ttemp0	set	126
  1178  0081                     ttemp1	set	129
  1179  0084                     ttemp2	set	132
  1180  0087                     ttemp3	set	135
  1181  007F                     ttemp4	set	127
  1182  007E                     ltemp	set	126
  1183  007E                     ltemp0	set	126
  1184  0082                     ltemp1	set	130
  1185  0086                     ltemp2	set	134
  1186  0080                     ltemp3	set	128
  1187                           
  1188                           	psect	intentry
  1189  0004                     __pintentry:	
  1190                           ;incstack = 0
  1191                           ; Regs used in _global_interrupt: [wreg-fsr0h+status,2+status,0+pclath]
  1192                           
  1193  0004                     interrupt_function:	
  1194  007E                     saved_w	set	btemp
  1195  0004  00FE               	movwf	btemp
  1196  0005  0E03               	swapf	3,w
  1197  0006  00F8               	movwf	??_global_interrupt+2
  1198  0007  0804               	movf	4,w
  1199  0008  00F9               	movwf	??_global_interrupt+3
  1200  0009  080A               	movf	10,w
  1201  000A  00FA               	movwf	??_global_interrupt+4
  1202  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1203  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1204  000D  087F               	movf	btemp+1,w
  1205  000E  00FB               	movwf	??_global_interrupt+5
  1206  000F  2917               	ljmp	_global_interrupt


Data Sizes:
    Strings     0
    Constant    84
    Data        15
    BSS         30
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80      1      40
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _global_interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _global_interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_interrupt in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _global_interrupt                                     6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _global_interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       0       6        0.0%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      1      28       4       50.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      35       8        0.0%
ABS                  0      0      35       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Jun 07 18:59:04 2015

                        pc 0002                __CFG_CP$OFF 0000                         fsr 0004  
                      l161 008C                        l173 00EC                        l169 00C4  
                      _GIE 005F               __CFG_CPD$OFF 0000                        fsr0 0004  
                      indf 0000               __CFG_IESO$ON 0000                       l1201 0112  
                     l1133 007E                       l1151 00AA                       l1145 0099  
                     l1171 00D1                       l1155 00B1                       l1139 0088  
                     l1165 00C0                       l1157 00B2                       l1183 00E8  
                     l1195 010A                       l1189 00F9                       l1199 0111  
                     _BRGH 04C2                       _T0IE 005D                       _T0IF 005A  
                     _CREN 00C4                       _FERR 00C2                       _PEIE 005E  
                     _RCIE 0465                       _RCIF 0065                       _OERR 00C1  
                     _TMR0 0001                       _SPEN 00C7                       _SYNC 04C4  
            __CFG_FCMEN$ON 0000                       _main 003A                       _tmp1 007C  
                     _tmp2 0073                       _tmp3 0074                       btemp 007E  
            __CFG_BOREN$ON 0000                       ltemp 007E                       start 0010  
                     ttemp 007E                       wtemp 007E                      ?_main 0076  
                    _BRG16 04DB              __CFG_WDTE$OFF 0000                      _ANSEL 011E  
                    i1l140 0137                      i1l150 016E                      i1l145 017B  
                    i1l154 018C                      i1l139 013E                      i1l921 0192  
                    i1l907 0174                      i1l925 019C                      i1l927 01A9  
                    i1l891 014B                      i1l877 013C                      i1l895 0154  
                    _RCREG 001A                      _TMR1H 000F                      _TMR1L 000E  
                    _SPBRG 0099                      _PORTA 0005                      _PORTB 0006  
                    _PORTC 0007                      _TRISA 0085                      _TRISB 0086  
                    _TRISC 0087              __CFG_PWRTE$ON 0000                      _loop1 002C  
                    _loop3 002E                      pclath 000A                      ltemp0 007E  
                    ltemp1 0082                      ltemp2 0086                      ltemp3 0080  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F             __CFG_MCLRE$OFF 0000            __initialization 0011  
             __end_of_main 0117                     ??_main 0047                     _ANSELH 011F  
                   _OSCCON 008F                     _TMR1GE 0086                     _TMR1IE 0460  
                   _TMR1IF 0060                     _TMR1CS 0081                     _SPBRGH 009A  
                   _TMR1ON 0080      __end_of_motor2_1Array 0224      __end_of_motor2_2Array 0233  
                   _motor1 0071                     _motor2 0072                     _motor3 0035  
                   saved_w 007E    __end_of__initialization 0038  __size_of_global_interrupt 009E  
           __pcstackCOMMON 0076               __pidataBANK0 025A                 __pbssBANK0 0020  
            _init_received 0032                 __pnvCOMMON 007C                 __pmaintext 003A  
               __pintentry 0004                 _direction1 0026                 _direction2 0028  
                  _T1OSCEN 0083                 _direction3 002A                    _OSCTUNE 0090  
               __stringtab 0200                    __ptext1 0117                  _T1CONbits 0010  
                  clrloop0 026A       end_of_initialization 0038          __end_of_posArray1 024A  
        __end_of_posArray2 0252          __end_of_posArray3 025A           _global_interrupt 0117  
      start_initialization 0011               _counter_uart 0070               _incremental1 0030  
             _incremental3 0031                __pdataBANK0 0038                __pbssCOMMON 0070  
                ___latbits 0000              __pcstackBANK0 0047              _motor2_1Array 0215  
            _motor2_2Array 0224                  __pstrings 0200   __end_of_global_interrupt 01B5  
        interrupt_function 0004                  clear_ram0 0269                  _posArray1 0242  
                _posArray2 024A                  _posArray3 0252                  _motor1run 0033  
                _motor2run 0034                  _motor3run 0036                  _uart_data 0038  
                _tmp_data2 0037                __stringbase 0205        __end_of_motor1Array 0215  
      __end_of_motor3Array 0242         __end_of__stringtab 0206                   _counter1 0020  
                 _counter2 0022                   _counter3 0024              __size_of_main 00DD  
                 _tmp_data 0075                   intlevel1 0000                _motor1Array 0206  
              _motor3Array 0233                  stringcode 0200                 _OPTION_REG 0081  
                 stringdir 0200          ?_global_interrupt 0076                   stringtab 0200  
       ??_global_interrupt 0076          __CFG_FOSC$INTRCIO 0000  
