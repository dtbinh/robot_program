

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun May 24 00:27:36 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F687
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     	;# 
    19  0001                     	;# 
    20  0002                     	;# 
    21  0003                     	;# 
    22  0004                     	;# 
    23  0005                     	;# 
    24  0006                     	;# 
    25  0007                     	;# 
    26  000A                     	;# 
    27  000B                     	;# 
    28  000C                     	;# 
    29  000D                     	;# 
    30  000E                     	;# 
    31  000E                     	;# 
    32  000F                     	;# 
    33  0010                     	;# 
    34  0013                     	;# 
    35  0014                     	;# 
    36  0018                     	;# 
    37  0019                     	;# 
    38  001A                     	;# 
    39  001E                     	;# 
    40  001F                     	;# 
    41  0081                     	;# 
    42  0085                     	;# 
    43  0086                     	;# 
    44  0087                     	;# 
    45  008C                     	;# 
    46  008D                     	;# 
    47  008E                     	;# 
    48  008F                     	;# 
    49  0090                     	;# 
    50  0093                     	;# 
    51  0093                     	;# 
    52  0093                     	;# 
    53  0094                     	;# 
    54  0095                     	;# 
    55  0095                     	;# 
    56  0096                     	;# 
    57  0096                     	;# 
    58  0097                     	;# 
    59  0098                     	;# 
    60  0099                     	;# 
    61  009A                     	;# 
    62  009B                     	;# 
    63  009E                     	;# 
    64  009F                     	;# 
    65  010C                     	;# 
    66  010C                     	;# 
    67  010D                     	;# 
    68  0115                     	;# 
    69  0116                     	;# 
    70  0118                     	;# 
    71  0119                     	;# 
    72  011A                     	;# 
    73  011B                     	;# 
    74  011E                     	;# 
    75  011F                     	;# 
    76  018C                     	;# 
    77  018D                     	;# 
    78  019E                     	;# 
    79                           
    80                           	psect	idataBANK0
    81  01C8                     __pidataBANK0:	
    82                           
    83                           ;initializer for _uart_data
    84  01C8  344B               	retlw	75
    85  01C9  344B               	retlw	75
    86  01CA  344B               	retlw	75
    87  01CB  344B               	retlw	75
    88  01CC  344B               	retlw	75
    89  01CD  344B               	retlw	75
    90  01CE  344B               	retlw	75
    91  01CF  344B               	retlw	75
    92  01D0  344B               	retlw	75
    93  01D1  344B               	retlw	75
    94  01D2  344B               	retlw	75
    95  01D3  344B               	retlw	75
    96  01D4  344B               	retlw	75
    97  01D5  344B               	retlw	75
    98  01D6  344B               	retlw	75
    99                           
   100                           	psect	strings
   101  017D                     __pstrings:	
   102  017D                     stringtab:	
   103  017D                     __stringtab:	
   104  017D                     stringcode:	
   105                           ;	String table - string pointers are 1 byte each
   106                           
   107  017D                     stringdir:	
   108  017D  3001               	movlw	high stringdir
   109  017E  008A               	movwf	10
   110  017F  0804               	movf	4,w
   111  0180  0A84               	incf	4,f
   112  0181  0782               	addwf	2,f
   113  0182                     __stringbase:	
   114  0182  3400               	retlw	0
   115  0183                     __end_of__stringtab:	
   116  0183                     _motor1Array:	
   117  0183  340F               	retlw	15
   118  0184  3487               	retlw	135
   119  0185  3405               	retlw	5
   120  0186  3443               	retlw	67
   121  0187  3469               	retlw	105
   122  0188  3482               	retlw	130
   123  0189  3494               	retlw	148
   124  018A  34A1               	retlw	161
   125  018B  34AC               	retlw	172
   126  018C  34B4               	retlw	180
   127  018D  34BB               	retlw	187
   128  018E  34C0               	retlw	192
   129  018F  34C5               	retlw	197
   130  0190  34C9               	retlw	201
   131  0191  34CD               	retlw	205
   132  0192                     __end_of_motor1Array:	
   133  0192                     _motor2_1Array:	
   134  0192  34A2               	retlw	162
   135  0193  34D1               	retlw	209
   136  0194  34E0               	retlw	224
   137  0195  34E8               	retlw	232
   138  0196  34ED               	retlw	237
   139  0197  34F0               	retlw	240
   140  0198  34F2               	retlw	242
   141  0199  34F4               	retlw	244
   142  019A  34F5               	retlw	245
   143  019B  34F6               	retlw	246
   144  019C  34F7               	retlw	247
   145  019D  34F8               	retlw	248
   146  019E  34F8               	retlw	248
   147  019F  34F9               	retlw	249
   148  01A0  34F9               	retlw	249
   149  01A1                     __end_of_motor2_1Array:	
   150  01A1                     _motor2_2Array:	
   151  01A1  343F               	retlw	63
   152  01A2  341F               	retlw	31
   153  01A3  34BF               	retlw	191
   154  01A4  348F               	retlw	143
   155  01A5  343F               	retlw	63
   156  01A6  345F               	retlw	95
   157  01A7  349A               	retlw	154
   158  01A8  3447               	retlw	71
   159  01A9  3494               	retlw	148
   160  01AA  349F               	retlw	159
   161  01AB  3479               	retlw	121
   162  01AC  342F               	retlw	47
   163  01AD  34C9               	retlw	201
   164  01AE  344D               	retlw	77
   165  01AF  34BF               	retlw	191
   166  01B0                     __end_of_motor2_2Array:	
   167  01B0                     _posArray1:	
   168  01B0  3411               	retlw	17
   169  01B1  3401               	retlw	1
   170  01B2  3403               	retlw	3
   171  01B3  3402               	retlw	2
   172  01B4  3406               	retlw	6
   173  01B5  3404               	retlw	4
   174  01B6  3414               	retlw	20
   175  01B7  3410               	retlw	16
   176  01B8                     __end_of_posArray1:	
   177  01B8                     _posArray2:	
   178  01B8  3409               	retlw	9
   179  01B9  3401               	retlw	1
   180  01BA  3403               	retlw	3
   181  01BB  3402               	retlw	2
   182  01BC  3406               	retlw	6
   183  01BD  3404               	retlw	4
   184  01BE  340C               	retlw	12
   185  01BF  3408               	retlw	8
   186  01C0                     __end_of_posArray2:	
   187  01C0                     _posArray3:	
   188  01C0  3490               	retlw	144
   189  01C1  3410               	retlw	16
   190  01C2  3430               	retlw	48
   191  01C3  3420               	retlw	32
   192  01C4  3460               	retlw	96
   193  01C5  3440               	retlw	64
   194  01C6  34C0               	retlw	192
   195  01C7  3480               	retlw	128
   196  01C8                     __end_of_posArray3:	
   197                           
   198                           	psect	nvCOMMON
   199  007C                     __pnvCOMMON:	
   200  007C                     _tmp1:	
   201  007C                     	ds	1
   202  0005                     _PORTA	set	5
   203  0006                     _PORTB	set	6
   204  0007                     _PORTC	set	7
   205  001A                     _RCREG	set	26
   206  0010                     _T1CONbits	set	16
   207  0001                     _TMR0	set	1
   208  000F                     _TMR1H	set	15
   209  000E                     _TMR1L	set	14
   210  00C4                     _CREN	set	196
   211  00C2                     _FERR	set	194
   212  005F                     _GIE	set	95
   213  00C1                     _OERR	set	193
   214  005E                     _PEIE	set	94
   215  0065                     _RCIF	set	101
   216  00C7                     _SPEN	set	199
   217  005D                     _T0IE	set	93
   218  005A                     _T0IF	set	90
   219  0060                     _T1IF	set	96
   220  0083                     _T1OSCEN	set	131
   221  0081                     _TMR1CS	set	129
   222  0086                     _TMR1GE	set	134
   223  0080                     _TMR1ON	set	128
   224  0081                     _OPTION_REG	set	129
   225  008F                     _OSCCON	set	143
   226  0090                     _OSCTUNE	set	144
   227  0099                     _SPBRG	set	153
   228  009A                     _SPBRGH	set	154
   229  0085                     _TRISA	set	133
   230  0086                     _TRISB	set	134
   231  0087                     _TRISC	set	135
   232  04DB                     _BRG16	set	1243
   233  04C2                     _BRGH	set	1218
   234  0465                     _RCIE	set	1125
   235  04C4                     _SYNC	set	1220
   236  0460                     _TMR1IE	set	1120
   237  011E                     _ANSEL	set	286
   238  011F                     _ANSELH	set	287
   239                           
   240                           ; #config settings
   241  0000                     
   242                           	psect	cinit
   243  0011                     start_initialization:	
   244  0011                     __initialization:	
   245                           
   246                           ; Clear objects allocated to COMMON
   247  0011  3070               	movlw	low __pbssCOMMON
   248  0012  0084               	movwf	4
   249  0013  3076               	movlw	low (__pbssCOMMON+6)
   250  0014  21D7               	fcall	clear_ram0
   251                           
   252                           ; Clear objects allocated to BANK0
   253  0015  1383               	bcf	3,7	;select IRP bank0
   254  0016  3020               	movlw	low __pbssBANK0
   255  0017  0084               	movwf	4
   256  0018  3038               	movlw	low (__pbssBANK0+24)
   257  0019  21D7               	fcall	clear_ram0
   258                           
   259                           ; Initialize objects allocated to BANK0
   260  001A  21C8               	fcall	__pidataBANK0	;fetch initializer
   261  001B  00B8               	movwf	__pdataBANK0& (0+127)
   262  001C  21C9               	fcall	__pidataBANK0+1	;fetch initializer
   263  001D  00B9               	movwf	(__pdataBANK0+1)& (0+127)
   264  001E  21CA               	fcall	__pidataBANK0+2	;fetch initializer
   265  001F  00BA               	movwf	(__pdataBANK0+2)& (0+127)
   266  0020  21CB               	fcall	__pidataBANK0+3	;fetch initializer
   267  0021  00BB               	movwf	(__pdataBANK0+3)& (0+127)
   268  0022  21CC               	fcall	__pidataBANK0+4	;fetch initializer
   269  0023  00BC               	movwf	(__pdataBANK0+4)& (0+127)
   270  0024  21CD               	fcall	__pidataBANK0+5	;fetch initializer
   271  0025  00BD               	movwf	(__pdataBANK0+5)& (0+127)
   272  0026  21CE               	fcall	__pidataBANK0+6	;fetch initializer
   273  0027  00BE               	movwf	(__pdataBANK0+6)& (0+127)
   274  0028  21CF               	fcall	__pidataBANK0+7	;fetch initializer
   275  0029  00BF               	movwf	(__pdataBANK0+7)& (0+127)
   276  002A  21D0               	fcall	__pidataBANK0+8	;fetch initializer
   277  002B  00C0               	movwf	(__pdataBANK0+8)& (0+127)
   278  002C  21D1               	fcall	__pidataBANK0+9	;fetch initializer
   279  002D  00C1               	movwf	(__pdataBANK0+9)& (0+127)
   280  002E  21D2               	fcall	__pidataBANK0+10	;fetch initializer
   281  002F  00C2               	movwf	(__pdataBANK0+10)& (0+127)
   282  0030  21D3               	fcall	__pidataBANK0+11	;fetch initializer
   283  0031  00C3               	movwf	(__pdataBANK0+11)& (0+127)
   284  0032  21D4               	fcall	__pidataBANK0+12	;fetch initializer
   285  0033  00C4               	movwf	(__pdataBANK0+12)& (0+127)
   286  0034  21D5               	fcall	__pidataBANK0+13	;fetch initializer
   287  0035  00C5               	movwf	(__pdataBANK0+13)& (0+127)
   288  0036  21D6               	fcall	__pidataBANK0+14	;fetch initializer
   289  0037  00C6               	movwf	(__pdataBANK0+14)& (0+127)
   290  0038                     end_of_initialization:	
   291                           ;End of C runtime variable initialization code
   292                           
   293  0038                     __end_of__initialization:	
   294  0038  0183               	clrf	3
   295  0039  283A               	ljmp	_main	;jump to C main() function
   296                           
   297                           	psect	bssCOMMON
   298  0070                     __pbssCOMMON:	
   299  0070                     _counter_uart:	
   300  0070                     	ds	1
   301  0071                     _motor1:	
   302  0071                     	ds	1
   303  0072                     _motor1run:	
   304  0072                     	ds	1
   305  0073                     _motor2:	
   306  0073                     	ds	1
   307  0074                     _tmp2:	
   308  0074                     	ds	1
   309  0075                     _tmp_data:	
   310  0075                     	ds	1
   311                           
   312                           	psect	bssBANK0
   313  0020                     __pbssBANK0:	
   314  0020                     _counter1:	
   315  0020                     	ds	2
   316  0022                     _counter2:	
   317  0022                     	ds	2
   318  0024                     _counter3:	
   319  0024                     	ds	2
   320  0026                     _direction1:	
   321  0026                     	ds	2
   322  0028                     _direction2:	
   323  0028                     	ds	2
   324  002A                     _direction3:	
   325  002A                     	ds	2
   326  002C                     _loop1:	
   327  002C                     	ds	2
   328  002E                     _loop3:	
   329  002E                     	ds	2
   330  0030                     _incremental1:	
   331  0030                     	ds	1
   332  0031                     _incremental3:	
   333  0031                     	ds	1
   334  0032                     _init_received:	
   335  0032                     	ds	1
   336  0033                     _motor2run:	
   337  0033                     	ds	1
   338  0034                     _motor3:	
   339  0034                     	ds	1
   340  0035                     _motor3run:	
   341  0035                     	ds	1
   342  0036                     _tmp3:	
   343  0036                     	ds	1
   344  0037                     _tmp_data2:	
   345  0037                     	ds	1
   346                           
   347                           	psect	dataBANK0
   348  0038                     __pdataBANK0:	
   349  0038                     _uart_data:	
   350  0038                     	ds	15
   351                           
   352                           	psect	clrtext
   353  01D7                     clear_ram0:	
   354                           ;	Called with FSR containing the base address, and
   355                           ;	W with the last address+1
   356                           
   357  01D7  0064               	clrwdt	;clear the watchdog before getting into this loop
   358  01D8                     clrloop0:	
   359  01D8  0180               	clrf	0	;clear RAM location pointed to by FSR
   360  01D9  0A84               	incf	4,f	;increment pointer
   361  01DA  0604               	xorwf	4,w	;XOR with final address
   362  01DB  1903               	btfsc	3,2	;have we reached the end yet?
   363  01DC  3400               	retlw	0	;all done for this memory range, return
   364  01DD  0604               	xorwf	4,w	;XOR again to restore value
   365  01DE  29D8               	goto	clrloop0	;do the next byte
   366                           
   367                           	psect	cstackCOMMON
   368  0076                     __pcstackCOMMON:	
   369  0076                     ?_global_interrupt:	
   370  0076                     ??_global_interrupt:	
   371                           ; 0 bytes @ 0x0
   372                           
   373  0076                     ?_main:	
   374                           ; 0 bytes @ 0x0
   375                           
   376                           
   377                           ; 2 bytes @ 0x0
   378  0076                     	ds	6
   379                           
   380                           	psect	cstackBANK0
   381  0047                     __pcstackBANK0:	
   382  0047                     ??_main:	
   383                           
   384                           ; 0 bytes @ 0x0
   385  0047                     	ds	1
   386                           
   387                           	psect	maintext
   388  003A                     __pmaintext:	
   389 ;;
   390 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   391 ;;
   392 ;; *************** function _main *****************
   393 ;; Defined at:
   394 ;;		line 147 in file "main.c"
   395 ;; Parameters:    Size  Location     Type
   396 ;;		None
   397 ;; Auto vars:     Size  Location     Type
   398 ;;		None
   399 ;; Return value:  Size  Location     Type
   400 ;;                  2  156[COMMON] int 
   401 ;; Registers used:
   402 ;;		wreg, status,2, status,0
   403 ;; Tracked objects:
   404 ;;		On entry : 17F/0
   405 ;;		On exit  : 0/0
   406 ;;		Unchanged: 0/0
   407 ;; Data sizes:     COMMON   BANK0   BANK1
   408 ;;      Params:         0       0       0
   409 ;;      Locals:         0       0       0
   410 ;;      Temps:          0       1       0
   411 ;;      Totals:         0       1       0
   412 ;;Total ram usage:        1 bytes
   413 ;; Hardware stack levels required when called:    2
   414 ;; This function calls:
   415 ;;		Nothing
   416 ;; This function is called by:
   417 ;;		Startup code after reset
   418 ;; This function uses a non-reentrant model
   419 ;;
   420                           
   421                           
   422                           ;psect for function _main
   423  003A                     _main:	
   424                           
   425                           ;main.c: 149: OSCCON = 0x00;
   426                           
   427                           ;incstack = 0
   428                           ; Regs used in _main: [wreg+status,2+status,0]
   429  003A  1683               	bsf	3,5	;RP0=1, select bank1
   430  003B  1303               	bcf	3,6	;RP1=0, select bank1
   431  003C  018F               	clrf	15	;volatile
   432                           
   433                           ;main.c: 150: OSCCON |= 0b01110001;
   434  003D  3071               	movlw	113
   435  003E  1283               	bcf	3,5	;RP0=0, select bank0
   436  003F  1303               	bcf	3,6	;RP1=0, select bank0
   437  0040  00C7               	movwf	??_main
   438  0041  0847               	movf	??_main,w
   439  0042  1683               	bsf	3,5	;RP0=1, select bank1
   440  0043  1303               	bcf	3,6	;RP1=0, select bank1
   441  0044  048F               	iorwf	15,f	;volatile
   442                           
   443                           ;main.c: 151: OSCTUNE = 0x00;
   444  0045  0190               	clrf	16	;volatile
   445                           
   446                           ;main.c: 155: OPTION_REG &= 0b11010000;
   447  0046  30D0               	movlw	208
   448  0047  1283               	bcf	3,5	;RP0=0, select bank0
   449  0048  1303               	bcf	3,6	;RP1=0, select bank0
   450  0049  00C7               	movwf	??_main
   451  004A  0847               	movf	??_main,w
   452  004B  1683               	bsf	3,5	;RP0=1, select bank1
   453  004C  1303               	bcf	3,6	;RP1=0, select bank1
   454  004D  0581               	andwf	1,f	;volatile
   455                           
   456                           ;main.c: 156: OPTION_REG |= 0b00000100;
   457  004E  1501               	bsf	1,2	;volatile
   458                           
   459                           ;main.c: 157: TMR0 = 0x00;
   460  004F  1283               	bcf	3,5	;RP0=0, select bank0
   461  0050  1303               	bcf	3,6	;RP1=0, select bank0
   462  0051  0181               	clrf	1	;volatile
   463                           
   464                           ;main.c: 158: T0IE = 1;
   465  0052  168B               	bsf	11,5	;volatile
   466                           
   467                           ;main.c: 163: TMR1GE = 0;
   468  0053  1310               	bcf	16,6	;volatile
   469                           
   470                           ;main.c: 164: T1CONbits.T1CKPS0 = 0;
   471  0054  1210               	bcf	16,4	;volatile
   472                           
   473                           ;main.c: 165: T1CONbits.T1CKPS1 = 0;
   474  0055  1290               	bcf	16,5	;volatile
   475                           
   476                           ;main.c: 166: T1OSCEN = 0;
   477  0056  1190               	bcf	16,3	;volatile
   478                           
   479                           ;main.c: 167: TMR1CS = 0;
   480  0057  1090               	bcf	16,1	;volatile
   481                           
   482                           ;main.c: 168: TMR1ON = 1;
   483  0058  1410               	bsf	16,0	;volatile
   484                           
   485                           ;main.c: 169: TMR1H = 0x00;
   486  0059  018F               	clrf	15	;volatile
   487                           
   488                           ;main.c: 170: TMR1H = 0x00;
   489  005A  018F               	clrf	15	;volatile
   490                           
   491                           ;main.c: 171: TMR1IE = 1;
   492  005B  1683               	bsf	3,5	;RP0=1, select bank1
   493  005C  1303               	bcf	3,6	;RP1=0, select bank1
   494  005D  140C               	bsf	12,0	;volatile
   495                           
   496                           ;main.c: 175: BRG16 = 0;
   497  005E  119B               	bcf	27,3	;volatile
   498                           
   499                           ;main.c: 176: BRGH = 0;
   500  005F  1118               	bcf	24,2	;volatile
   501                           
   502                           ;main.c: 177: SPBRGH = 0;
   503  0060  019A               	clrf	26	;volatile
   504                           
   505                           ;main.c: 178: SPBRG = 0x0C;
   506  0061  300C               	movlw	12
   507  0062  0099               	movwf	25	;volatile
   508                           
   509                           ;main.c: 179: SYNC = 0;
   510  0063  1218               	bcf	24,4	;volatile
   511                           
   512                           ;main.c: 180: SPEN = 1;
   513  0064  1283               	bcf	3,5	;RP0=0, select bank0
   514  0065  1303               	bcf	3,6	;RP1=0, select bank0
   515  0066  1798               	bsf	24,7	;volatile
   516                           
   517                           ;main.c: 181: RCIE = 1;
   518  0067  1683               	bsf	3,5	;RP0=1, select bank1
   519  0068  1303               	bcf	3,6	;RP1=0, select bank1
   520  0069  168C               	bsf	12,5	;volatile
   521                           
   522                           ;main.c: 182: CREN = 1;
   523  006A  1283               	bcf	3,5	;RP0=0, select bank0
   524  006B  1303               	bcf	3,6	;RP1=0, select bank0
   525  006C  1618               	bsf	24,4	;volatile
   526                           
   527                           ;main.c: 200: TRISA = 0x00;
   528  006D  1683               	bsf	3,5	;RP0=1, select bank1
   529  006E  1303               	bcf	3,6	;RP1=0, select bank1
   530  006F  0185               	clrf	5	;volatile
   531                           
   532                           ;main.c: 201: TRISB = 0b00100000;
   533  0070  3020               	movlw	32
   534  0071  0086               	movwf	6	;volatile
   535                           
   536                           ;main.c: 202: TRISC = 0x00;
   537  0072  0187               	clrf	7	;volatile
   538                           
   539                           ;main.c: 203: ANSEL = 0x00;
   540  0073  1283               	bcf	3,5	;RP0=0, select bank2
   541  0074  1703               	bsf	3,6	;RP1=1, select bank2
   542  0075  019E               	clrf	30	;volatile
   543                           
   544                           ;main.c: 204: ANSELH = 0x00;
   545  0076  019F               	clrf	31	;volatile
   546                           
   547                           ;main.c: 207: PORTA = 0x00;
   548  0077  1283               	bcf	3,5	;RP0=0, select bank0
   549  0078  1303               	bcf	3,6	;RP1=0, select bank0
   550  0079  0185               	clrf	5	;volatile
   551                           
   552                           ;main.c: 208: PORTB = 0x00;
   553  007A  0186               	clrf	6	;volatile
   554                           
   555                           ;main.c: 209: PORTC = 0x00;
   556  007B  0187               	clrf	7	;volatile
   557                           
   558                           ;main.c: 210: PEIE = 1;
   559  007C  170B               	bsf	11,6	;volatile
   560                           
   561                           ;main.c: 211: GIE = 1;
   562  007D  178B               	bsf	11,7	;volatile
   563  007E                     l1071:	
   564                           ;main.c: 213: while(1){
   565                           
   566                           
   567                           ;main.c: 216: tmp1 = uart_data[14];
   568  007E  0846               	movf	_uart_data+14,w
   569  007F  00C7               	movwf	??_main
   570  0080  0847               	movf	??_main,w
   571  0081  00FC               	movwf	_tmp1
   572                           
   573                           ;main.c: 218: if(tmp1 == 75)
   574  0082  087C               	movf	_tmp1,w
   575  0083  3A4B               	xorlw	75
   576  0084  1D03               	skipz
   577  0085  2888               	goto	l1077
   578                           
   579                           ;main.c: 219: motor1run = 0x00;
   580  0086  01F2               	clrf	_motor1run
   581  0087  288C               	goto	l159
   582  0088                     l1077:	
   583                           
   584                           ;main.c: 220: else
   585                           ;main.c: 221: motor1run = 0xFF;
   586  0088  30FF               	movlw	255
   587  0089  00C7               	movwf	??_main
   588  008A  0847               	movf	??_main,w
   589  008B  00F2               	movwf	_motor1run
   590  008C                     l159:	
   591                           
   592                           ;main.c: 223: if(tmp1 >=60){
   593  008C  303C               	movlw	60
   594  008D  027C               	subwf	_tmp1,w
   595  008E  1C03               	skipc
   596  008F  2899               	goto	l1083
   597                           
   598                           ;main.c: 224: tmp1 = tmp1 - 15;
   599  0090  087C               	movf	_tmp1,w
   600  0091  3EF1               	addlw	241
   601  0092  00C7               	movwf	??_main
   602  0093  0847               	movf	??_main,w
   603  0094  00FC               	movwf	_tmp1
   604                           
   605                           ;main.c: 225: direction1 = -1;
   606  0095  30FF               	movlw	255
   607  0096  00A6               	movwf	_direction1
   608  0097  30FF               	movlw	255
   609  0098  289C               	goto	L1
   610  0099                     l1083:	
   611                           ;main.c: 226: }
   612                           
   613                           
   614                           ;main.c: 227: else
   615                           ;main.c: 228: direction1 = 1;
   616  0099  3001               	movlw	1
   617  009A  00A6               	movwf	_direction1
   618  009B  3000               	movlw	0
   619  009C                     L1:	
   620  009C  00A7               	movwf	_direction1+1
   621                           
   622                           ;main.c: 233: tmp1 = tmp1 - 45;
   623  009D  087C               	movf	_tmp1,w
   624  009E  3ED3               	addlw	211
   625  009F  00C7               	movwf	??_main
   626  00A0  0847               	movf	??_main,w
   627  00A1  00FC               	movwf	_tmp1
   628                           
   629                           ;main.c: 234: if(tmp1 == 0)
   630  00A2  08FC               	movf	_tmp1,f
   631  00A3  1D03               	skipz
   632  00A4  28AA               	goto	l1089
   633                           
   634                           ;main.c: 235: incremental1 = 2;
   635  00A5  3002               	movlw	2
   636  00A6  00C7               	movwf	??_main
   637  00A7  0847               	movf	??_main,w
   638  00A8  00B0               	movwf	_incremental1
   639  00A9  28B2               	goto	l1095
   640  00AA                     l1089:	
   641                           
   642                           ;main.c: 236: else if(tmp1 == 1)
   643  00AA  087C               	movf	_tmp1,w
   644  00AB  3A01               	xorlw	1
   645  00AC  1D03               	skipz
   646  00AD  28B1               	goto	l1093
   647                           
   648                           ;main.c: 237: incremental1 = 1;
   649  00AE  01B0               	clrf	_incremental1
   650  00AF  0AB0               	incf	_incremental1,f
   651  00B0  28B2               	goto	l1095
   652  00B1                     l1093:	
   653                           
   654                           ;main.c: 238: else
   655                           ;main.c: 239: incremental1 = 0;
   656  00B1  01B0               	clrf	_incremental1
   657  00B2                     l1095:	
   658                           
   659                           ;main.c: 242: motor1 = tmp1;
   660  00B2  087C               	movf	_tmp1,w
   661  00B3  00C7               	movwf	??_main
   662  00B4  0847               	movf	??_main,w
   663  00B5  00F1               	movwf	_motor1
   664                           
   665                           ;main.c: 246: tmp2 = uart_data[13];
   666  00B6  0845               	movf	_uart_data+13,w
   667  00B7  00C7               	movwf	??_main
   668  00B8  0847               	movf	??_main,w
   669  00B9  00F4               	movwf	_tmp2
   670                           
   671                           ;main.c: 247: if(tmp2 == 75)
   672  00BA  0874               	movf	_tmp2,w
   673  00BB  3A4B               	xorlw	75
   674  00BC  1D03               	skipz
   675  00BD  28C0               	goto	l1103
   676                           
   677                           ;main.c: 248: motor2run = 0x00;
   678  00BE  01B3               	clrf	_motor2run
   679  00BF  28C4               	goto	l167
   680  00C0                     l1103:	
   681                           
   682                           ;main.c: 249: else
   683                           ;main.c: 250: motor2run = 0xFF;
   684  00C0  30FF               	movlw	255
   685  00C1  00C7               	movwf	??_main
   686  00C2  0847               	movf	??_main,w
   687  00C3  00B3               	movwf	_motor2run
   688  00C4                     l167:	
   689                           
   690                           ;main.c: 252: if(tmp2 >=60){
   691  00C4  303C               	movlw	60
   692  00C5  0274               	subwf	_tmp2,w
   693  00C6  1C03               	skipc
   694  00C7  28D1               	goto	l1109
   695                           
   696                           ;main.c: 253: tmp2 = tmp2 - 15;
   697  00C8  0874               	movf	_tmp2,w
   698  00C9  3EF1               	addlw	241
   699  00CA  00C7               	movwf	??_main
   700  00CB  0847               	movf	??_main,w
   701  00CC  00F4               	movwf	_tmp2
   702                           
   703                           ;main.c: 254: direction2 = -1;
   704  00CD  30FF               	movlw	255
   705  00CE  00A8               	movwf	_direction2
   706  00CF  30FF               	movlw	255
   707  00D0  28D4               	goto	L2
   708  00D1                     l1109:	
   709                           ;main.c: 255: }
   710                           
   711                           
   712                           ;main.c: 256: else
   713                           ;main.c: 257: direction2 = 1;
   714  00D1  3001               	movlw	1
   715  00D2  00A8               	movwf	_direction2
   716  00D3  3000               	movlw	0
   717  00D4                     L2:	
   718  00D4  00A9               	movwf	_direction2+1
   719                           
   720                           ;main.c: 259: tmp2 = tmp2 - 45;
   721  00D5  0874               	movf	_tmp2,w
   722  00D6  3ED3               	addlw	211
   723  00D7  00C7               	movwf	??_main
   724  00D8  0847               	movf	??_main,w
   725  00D9  00F4               	movwf	_tmp2
   726                           
   727                           ;main.c: 260: motor2 = tmp2;
   728  00DA  0874               	movf	_tmp2,w
   729  00DB  00C7               	movwf	??_main
   730  00DC  0847               	movf	??_main,w
   731  00DD  00F3               	movwf	_motor2
   732  00DE  287E               	goto	l1071
   733  00DF                     __end_of_main:	
   734                           
   735                           	psect	text1
   736  00DF                     __ptext1:	
   737 ;; *************** function _global_interrupt *****************
   738 ;; Defined at:
   739 ;;		line 50 in file "main.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;		None
   742 ;; Auto vars:     Size  Location     Type
   743 ;;		None
   744 ;; Return value:  Size  Location     Type
   745 ;;		None               void
   746 ;; Registers used:
   747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMMON   BANK0   BANK1
   753 ;;      Params:         0       0       0
   754 ;;      Locals:         0       0       0
   755 ;;      Temps:          6       0       0
   756 ;;      Totals:         6       0       0
   757 ;;Total ram usage:        6 bytes
   758 ;; Hardware stack levels used:    2
   759 ;; This function calls:
   760 ;;		Nothing
   761 ;; This function is called by:
   762 ;;		Interrupt level 1
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           
   767                           ;psect for function _global_interrupt
   768  00DF                     _global_interrupt:	
   769                           
   770                           ;main.c: 52: GIE = 0 ;
   771  00DF  138B               	bcf	11,7	;volatile
   772                           
   773                           ;main.c: 53: CREN = 1;
   774  00E0  1618               	bsf	24,4	;volatile
   775                           
   776                           ;main.c: 55: if(RCIF){
   777  00E1  1E8C               	btfss	12,5	;volatile
   778  00E2  2906               	goto	i1l137
   779                           
   780                           ;main.c: 58: if(FERR == 0 && OERR == 0){
   781  00E3  1D18               	btfss	24,2	;volatile
   782  00E4  1898               	btfsc	24,1	;volatile
   783  00E5  28FF               	goto	i1l138
   784                           
   785                           ;main.c: 59: tmp_data = RCREG;
   786  00E6  081A               	movf	26,w	;volatile
   787  00E7  00F6               	movwf	??_global_interrupt
   788  00E8  0876               	movf	??_global_interrupt,w
   789  00E9  00F5               	movwf	_tmp_data
   790                           
   791                           ;main.c: 61: if(tmp_data == 0x55){
   792  00EA  0875               	movf	_tmp_data,w
   793  00EB  3A55               	xorlw	85
   794  00EC  1903               	btfsc	3,2
   795  00ED  2904               	goto	i1l841
   796                           
   797                           ;main.c: 65: }
   798                           ;main.c: 67: uart_data[counter_uart] = tmp_data;
   799                           
   800                           ;main.c: 64: return;
   801                           
   802                           ;main.c: 63: GIE = 1;
   803                           
   804                           ;main.c: 62: counter_uart = 0;
   805  00EE  0875               	movf	_tmp_data,w
   806  00EF  00F6               	movwf	??_global_interrupt
   807  00F0  0870               	movf	_counter_uart,w
   808  00F1  3E38               	addlw	_uart_data& (0+255)
   809  00F2  0084               	movwf	4
   810  00F3  0876               	movf	??_global_interrupt,w
   811  00F4  1383               	bcf	3,7	;select IRP bank0
   812  00F5  0080               	movwf	0
   813                           
   814                           ;main.c: 68: counter_uart += 1;
   815  00F6  3001               	movlw	1
   816  00F7  00F6               	movwf	??_global_interrupt
   817  00F8  0876               	movf	??_global_interrupt,w
   818  00F9  07F0               	addwf	_counter_uart,f
   819                           
   820                           ;main.c: 69: if(counter_uart == 15){
   821  00FA  0870               	movf	_counter_uart,w
   822  00FB  3A0F               	xorlw	15
   823  00FC  1D03               	skipz
   824  00FD  2971               	goto	i1l891
   825  00FE  2904               	goto	i1l841
   826  00FF                     i1l138:	
   827                           ;main.c: 71: }
   828                           ;main.c: 75: }
   829                           
   830                           ;main.c: 70: counter_uart = 0;
   831                           
   832                           
   833                           ;main.c: 76: else{
   834                           ;main.c: 77: CREN = 0;
   835  00FF  1218               	bcf	24,4	;volatile
   836                           
   837                           ;main.c: 78: tmp_data = RCREG;
   838  0100  081A               	movf	26,w	;volatile
   839  0101  00F6               	movwf	??_global_interrupt
   840  0102  0876               	movf	??_global_interrupt,w
   841  0103  00F5               	movwf	_tmp_data
   842  0104                     i1l841:	
   843                           
   844                           ;main.c: 79: counter_uart = 0;
   845  0104  01F0               	clrf	_counter_uart
   846  0105  2971               	goto	i1l891
   847  0106                     i1l137:	
   848                           ;main.c: 82: return;
   849                           
   850                           ;main.c: 80: }
   851                           ;main.c: 81: GIE = 1;
   852                           
   853                           
   854                           ;main.c: 84: }
   855                           ;main.c: 87: if(T0IF){
   856  0106  1D0B               	btfss	11,2	;volatile
   857  0107  2943               	goto	i1l143
   858                           
   859                           ;main.c: 88: T0IF = 0;
   860  0108  110B               	bcf	11,2	;volatile
   861                           
   862                           ;main.c: 91: if(loop1 == 2){
   863  0109  3002               	movlw	2
   864  010A  062C               	xorwf	_loop1,w
   865  010B  042D               	iorwf	_loop1+1,w
   866  010C  1D03               	skipz
   867  010D  2913               	goto	i1l855
   868                           
   869                           ;main.c: 92: loop1 = 1;
   870  010E  3001               	movlw	1
   871  010F  00AC               	movwf	_loop1
   872  0110  3000               	movlw	0
   873  0111  00AD               	movwf	_loop1+1
   874  0112  291A               	goto	L3
   875  0113                     i1l855:	
   876                           ;main.c: 94: }
   877                           
   878                           ;main.c: 93: TMR0 = 0;
   879                           
   880                           
   881                           ;main.c: 95: else if(loop1 == 1){
   882  0113  3001               	movlw	1
   883  0114  062C               	xorwf	_loop1,w
   884  0115  042D               	iorwf	_loop1+1,w
   885  0116  1D03               	skipz
   886  0117  291C               	goto	i1l859
   887                           
   888                           ;main.c: 96: loop1 = 0;
   889  0118  01AC               	clrf	_loop1
   890  0119  01AD               	clrf	_loop1+1
   891  011A                     L3:	
   892                           
   893                           ;main.c: 97: TMR0 = 0;
   894  011A  0181               	clrf	1	;volatile
   895                           
   896                           ;main.c: 98: }
   897  011B  2971               	goto	i1l891
   898  011C                     i1l859:	
   899                           
   900                           ;main.c: 99: else{
   901                           ;main.c: 100: TMR0 = motor1Array[motor1];
   902  011C  0871               	movf	_motor1,w
   903  011D  3E01               	addlw	low (_motor1Array-__stringbase)
   904  011E  0084               	movwf	4
   905  011F  217D               	fcall	stringdir
   906  0120  0081               	movwf	1	;volatile
   907                           
   908                           ;main.c: 101: loop1 = incremental1;
   909  0121  0830               	movf	_incremental1,w
   910  0122  00F6               	movwf	??_global_interrupt
   911  0123  01F7               	clrf	??_global_interrupt+1
   912  0124  0876               	movf	??_global_interrupt,w
   913  0125  00AC               	movwf	_loop1
   914  0126  0877               	movf	??_global_interrupt+1,w
   915  0127  00AD               	movwf	_loop1+1
   916                           
   917                           ;main.c: 102: counter1 += direction1;
   918  0128  0826               	movf	_direction1,w
   919  0129  07A0               	addwf	_counter1,f
   920  012A  1803               	skipnc
   921  012B  0AA1               	incf	_counter1+1,f
   922  012C  0827               	movf	_direction1+1,w
   923  012D  07A1               	addwf	_counter1+1,f
   924                           
   925                           ;main.c: 103: if(counter1 == 8)
   926  012E  3008               	movlw	8
   927  012F  0620               	xorwf	_counter1,w
   928  0130  0421               	iorwf	_counter1+1,w
   929  0131  1D03               	skipz
   930  0132  2936               	goto	i1l148
   931                           
   932                           ;main.c: 104: counter1 = 0;
   933  0133  01A0               	clrf	_counter1
   934  0134  01A1               	clrf	_counter1+1
   935  0135  293C               	goto	i1l871
   936  0136                     i1l148:	
   937                           
   938                           ;main.c: 105: else if(counter1 < 0)
   939  0136  1FA1               	btfss	_counter1+1,7
   940  0137  293C               	goto	i1l871
   941                           
   942                           ;main.c: 106: counter1 = 8;
   943  0138  3008               	movlw	8
   944  0139  00A0               	movwf	_counter1
   945  013A  3000               	movlw	0
   946  013B  00A1               	movwf	_counter1+1
   947  013C                     i1l871:	
   948                           
   949                           ;main.c: 108: PORTA = posArray1[counter1] & motor1run;
   950  013C  0820               	movf	_counter1,w
   951  013D  3E2E               	addlw	low (_posArray1-__stringbase)
   952  013E  0084               	movwf	4
   953  013F  217D               	fcall	stringdir
   954  0140  0572               	andwf	_motor1run,w
   955  0141  0085               	movwf	5	;volatile
   956  0142  2971               	goto	i1l891
   957  0143                     i1l143:	
   958                           ;main.c: 113: return;
   959                           
   960                           ;main.c: 111: }
   961                           ;main.c: 112: GIE = 1 ;
   962                           
   963                           
   964                           ;main.c: 115: }
   965                           ;main.c: 118: if(T1IF){
   966  0143  1C0C               	btfss	12,0	;volatile
   967  0144  2964               	goto	i1l889
   968                           
   969                           ;main.c: 119: T1IF = 0;
   970  0145  100C               	bcf	12,0	;volatile
   971                           
   972                           ;main.c: 121: counter2 += direction2;
   973  0146  0828               	movf	_direction2,w
   974  0147  07A2               	addwf	_counter2,f
   975  0148  1803               	skipnc
   976  0149  0AA3               	incf	_counter2+1,f
   977  014A  0829               	movf	_direction2+1,w
   978  014B  07A3               	addwf	_counter2+1,f
   979                           
   980                           ;main.c: 123: if(counter2 == 8)
   981  014C  3008               	movlw	8
   982  014D  0622               	xorwf	_counter2,w
   983  014E  0423               	iorwf	_counter2+1,w
   984  014F  1D03               	skipz
   985  0150  2954               	goto	i1l152
   986                           
   987                           ;main.c: 124: counter2 = 0;
   988  0151  01A2               	clrf	_counter2
   989  0152  01A3               	clrf	_counter2+1
   990  0153  295A               	goto	i1l885
   991  0154                     i1l152:	
   992                           
   993                           ;main.c: 125: else if(counter2 < 0)
   994  0154  1FA3               	btfss	_counter2+1,7
   995  0155  295A               	goto	i1l885
   996                           
   997                           ;main.c: 126: counter2 = 8;
   998  0156  3008               	movlw	8
   999  0157  00A2               	movwf	_counter2
  1000  0158  3000               	movlw	0
  1001  0159  00A3               	movwf	_counter2+1
  1002  015A                     i1l885:	
  1003                           
  1004                           ;main.c: 128: TMR1H = motor2_1Array[motor2];
  1005  015A  0873               	movf	_motor2,w
  1006  015B  3E10               	addlw	low (_motor2_1Array-__stringbase)
  1007  015C  0084               	movwf	4
  1008  015D  217D               	fcall	stringdir
  1009  015E  008F               	movwf	15	;volatile
  1010                           
  1011                           ;main.c: 129: TMR1L = motor2_2Array[motor2];
  1012  015F  0873               	movf	_motor2,w
  1013  0160  3E1F               	addlw	low (_motor2_2Array-__stringbase)
  1014  0161  0084               	movwf	4
  1015  0162  217D               	fcall	stringdir
  1016  0163  008E               	movwf	14	;volatile
  1017  0164                     i1l889:	
  1018                           
  1019                           ;main.c: 132: }
  1020                           ;main.c: 134: PORTC = (posArray2[counter2] & motor2run) | (posArray3[counter3] & motor3r
      +                          un);
  1021  0164  0824               	movf	_counter3,w
  1022  0165  3E3E               	addlw	low (_posArray3-__stringbase)
  1023  0166  0084               	movwf	4
  1024  0167  217D               	fcall	stringdir
  1025  0168  0535               	andwf	_motor3run,w
  1026  0169  00F6               	movwf	??_global_interrupt
  1027  016A  0822               	movf	_counter2,w
  1028  016B  3E36               	addlw	low (_posArray2-__stringbase)
  1029  016C  0084               	movwf	4
  1030  016D  217D               	fcall	stringdir
  1031  016E  0533               	andwf	_motor2run,w
  1032  016F  0476               	iorwf	??_global_interrupt,w
  1033  0170  0087               	movwf	7	;volatile
  1034  0171                     i1l891:	
  1035                           
  1036                           ;main.c: 137: GIE = 1 ;
  1037  0171  178B               	bsf	11,7	;volatile
  1038                           
  1039                           ;main.c: 138: return;
  1040  0172  087B               	movf	??_global_interrupt+5,w
  1041  0173  00FF               	movwf	127
  1042  0174  087A               	movf	??_global_interrupt+4,w
  1043  0175  008A               	movwf	10
  1044  0176  0879               	movf	??_global_interrupt+3,w
  1045  0177  0084               	movwf	4
  1046  0178  0E78               	swapf	(??_global_interrupt+2)^(0+-128),w
  1047  0179  0083               	movwf	3
  1048  017A  0EFE               	swapf	126,f
  1049  017B  0E7E               	swapf	126,w
  1050  017C  0009               	retfie
  1051  017D                     __end_of_global_interrupt:	
  1052  007E                     btemp	set	126	;btemp
  1053  007E                     wtemp	set	126
  1054  007E                     wtemp0	set	126
  1055  0080                     wtemp1	set	128
  1056  0082                     wtemp2	set	130
  1057  0084                     wtemp3	set	132
  1058  0086                     wtemp4	set	134
  1059  0088                     wtemp5	set	136
  1060  007F                     wtemp6	set	127
  1061  007E                     ttemp	set	126
  1062  007E                     ttemp0	set	126
  1063  0081                     ttemp1	set	129
  1064  0084                     ttemp2	set	132
  1065  0087                     ttemp3	set	135
  1066  007F                     ttemp4	set	127
  1067  007E                     ltemp	set	126
  1068  007E                     ltemp0	set	126
  1069  0082                     ltemp1	set	130
  1070  0086                     ltemp2	set	134
  1071  0080                     ltemp3	set	128
  1072                           
  1073                           	psect	intentry
  1074  0004                     __pintentry:	
  1075                           ;incstack = 0
  1076                           ; Regs used in _global_interrupt: [wreg-fsr0h+status,2+status,0+pclath]
  1077                           
  1078  0004                     interrupt_function:	
  1079  007E                     saved_w	set	btemp
  1080  0004  00FE               	movwf	btemp
  1081  0005  0E03               	swapf	3,w
  1082  0006  00F8               	movwf	??_global_interrupt+2
  1083  0007  0804               	movf	4,w
  1084  0008  00F9               	movwf	??_global_interrupt+3
  1085  0009  080A               	movf	10,w
  1086  000A  00FA               	movwf	??_global_interrupt+4
  1087  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1088  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1089  000D  087F               	movf	btemp+1,w
  1090  000E  00FB               	movwf	??_global_interrupt+5
  1091  000F  28DF               	ljmp	_global_interrupt


Data Sizes:
    Strings     0
    Constant    69
    Data        15
    BSS         30
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80      1      40
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _global_interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _global_interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_interrupt in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _global_interrupt                                     6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _global_interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       0       6        0.0%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      1      28       4       50.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      35       8        0.0%
ABS                  0      0      35       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun May 24 00:27:36 2015

                        pc 0002                __CFG_CP$OFF 0000                         fsr 0004  
                      l167 00C4                        l159 008C                        _GIE 005F  
             __CFG_CPD$OFF 0000                        fsr0 0004                        indf 0000  
             __CFG_IESO$ON 0000                       l1103 00C0                       l1109 00D1  
                     l1071 007E                       l1083 0099                       l1093 00B1  
                     l1077 0088                       l1095 00B2                       l1089 00AA  
                     _BRGH 04C2                       _T0IE 005D                       _T0IF 005A  
                     _CREN 00C4                       _FERR 00C2                       _T1IF 0060  
                     _PEIE 005E                       _RCIE 0465                       _RCIF 0065  
                     _OERR 00C1                       _TMR0 0001                       _SPEN 00C7  
                     _SYNC 04C4              __CFG_FCMEN$ON 0000                       _main 003A  
                     _tmp1 007C                       _tmp2 0074                       _tmp3 0036  
                     btemp 007E              __CFG_BOREN$ON 0000                       ltemp 007E  
                     start 0010                       ttemp 007E                       wtemp 007E  
                    ?_main 0076                      _BRG16 04DB              __CFG_WDTE$OFF 0000  
                    _ANSEL 011E                      i1l143 0143                      i1l152 0154  
                    i1l137 0106                      i1l138 00FF                      i1l148 0136  
                    i1l841 0104                      i1l871 013C                      i1l855 0113  
                    i1l891 0171                      i1l859 011C                      i1l885 015A  
                    i1l889 0164                      _RCREG 001A                      _TMR1H 000F  
                    _TMR1L 000E                      _SPBRG 0099                      _PORTA 0005  
                    _PORTB 0006                      _PORTC 0007                      _TRISA 0085  
                    _TRISB 0086                      _TRISC 0087              __CFG_PWRTE$ON 0000  
                    _loop1 002C                      _loop3 002E                      pclath 000A  
                    ltemp0 007E                      ltemp1 0082                      ltemp2 0086  
                    ltemp3 0080                      ttemp0 007E                      ttemp1 0081  
                    ttemp2 0084                      ttemp3 0087                      ttemp4 007F  
                    status 0003                      wtemp0 007E                      wtemp1 0080  
                    wtemp2 0082                      wtemp3 0084                      wtemp4 0086  
                    wtemp5 0088                      wtemp6 007F             __CFG_MCLRE$OFF 0000  
          __initialization 0011               __end_of_main 00DF                     ??_main 0047  
                   _ANSELH 011F                     _OSCCON 008F                     _TMR1GE 0086  
                   _TMR1IE 0460                     _TMR1CS 0081                     _SPBRGH 009A  
                   _TMR1ON 0080      __end_of_motor2_1Array 01A1      __end_of_motor2_2Array 01B0  
                   _motor1 0071                     _motor2 0073                     _motor3 0034  
                   saved_w 007E    __end_of__initialization 0038  __size_of_global_interrupt 009E  
           __pcstackCOMMON 0076               __pidataBANK0 01C8                 __pbssBANK0 0020  
            _init_received 0032                 __pnvCOMMON 007C                 __pmaintext 003A  
               __pintentry 0004                 _direction1 0026                 _direction2 0028  
                  _T1OSCEN 0083                 _direction3 002A                    _OSCTUNE 0090  
               __stringtab 017D                    __ptext1 00DF                  _T1CONbits 0010  
                  clrloop0 01D8       end_of_initialization 0038          __end_of_posArray1 01B8  
        __end_of_posArray2 01C0          __end_of_posArray3 01C8           _global_interrupt 00DF  
      start_initialization 0011               _counter_uart 0070               _incremental1 0030  
             _incremental3 0031                __pdataBANK0 0038                __pbssCOMMON 0070  
                ___latbits 0000              __pcstackBANK0 0047              _motor2_1Array 0192  
            _motor2_2Array 01A1                  __pstrings 017D   __end_of_global_interrupt 017D  
        interrupt_function 0004                  clear_ram0 01D7                  _posArray1 01B0  
                _posArray2 01B8                  _posArray3 01C0                  _motor1run 0072  
                _motor2run 0033                  _motor3run 0035                  _uart_data 0038  
                _tmp_data2 0037                __stringbase 0182        __end_of_motor1Array 0192  
       __end_of__stringtab 0183                   _counter1 0020                   _counter2 0022  
                 _counter3 0024              __size_of_main 00A5                   _tmp_data 0075  
                 intlevel1 0000                _motor1Array 0183                  stringcode 017D  
               _OPTION_REG 0081                   stringdir 017D          ?_global_interrupt 0076  
                 stringtab 017D         ??_global_interrupt 0076          __CFG_FOSC$INTRCIO 0000  
